USE [master]
GO
/****** Object:  Database [InspectorDB]    Script Date: 21.03.2024 10:31:31 ******/
CREATE DATABASE [InspectorDB]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'InspectorDB', FILENAME = N'F:\_downloaded\DB\InspectorDB.mdf' , SIZE = 216512KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'InspectorDB_log', FILENAME = N'F:\_downloaded\DB\InspectorDB_log.ldf' , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [InspectorDB] SET COMPATIBILITY_LEVEL = 100
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [InspectorDB].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [InspectorDB] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [InspectorDB] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [InspectorDB] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [InspectorDB] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [InspectorDB] SET ARITHABORT OFF 
GO
ALTER DATABASE [InspectorDB] SET AUTO_CLOSE ON 
GO
ALTER DATABASE [InspectorDB] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [InspectorDB] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [InspectorDB] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [InspectorDB] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [InspectorDB] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [InspectorDB] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [InspectorDB] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [InspectorDB] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [InspectorDB] SET  DISABLE_BROKER 
GO
ALTER DATABASE [InspectorDB] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [InspectorDB] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [InspectorDB] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [InspectorDB] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [InspectorDB] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [InspectorDB] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [InspectorDB] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [InspectorDB] SET RECOVERY FULL 
GO
ALTER DATABASE [InspectorDB] SET  MULTI_USER 
GO
ALTER DATABASE [InspectorDB] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [InspectorDB] SET DB_CHAINING OFF 
GO
ALTER DATABASE [InspectorDB] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [InspectorDB] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [InspectorDB] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [InspectorDB] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [InspectorDB] SET QUERY_STORE = OFF
GO
USE [InspectorDB]
GO
/****** Object:  User [dbUser]    Script Date: 21.03.2024 10:31:31 ******/
CREATE USER [dbUser] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [dbUser]
GO
ALTER ROLE [db_datareader] ADD MEMBER [dbUser]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [dbUser]
GO
/****** Object:  SqlAssembly [StringUtilities]    Script Date: 21.03.2024 10:31:31 ******/
CREATE ASSEMBLY [StringUtilities]
FROM 0x
WITH PERMISSION_SET = SAFE
GO
/****** Object:  UserDefinedAggregate [dbo].[Concatenate]    Script Date: 21.03.2024 10:31:31 ******/
CREATE AGGREGATE [dbo].[Concatenate]
(@input [nvarchar](4000))
RETURNS[nvarchar](4000)
EXTERNAL NAME [StringUtilities].[Microsoft.Samples.SqlServer.Concatenate]
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Acts]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Acts]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_number] [int] NULL, [doc_laboratory] [nchar](10) NULL, [doc_date] [datetime] NULL, [client_adress_warehouse] [nvarchar](200) NULL, [doc_user] [nvarchar](100) NOT NULL, [representative] [nvarchar](200) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_number] , [doc_laboratory] , [doc_date] , [client_adress_warehouse] , [doc_user] , [representative] , [client_guid]  from Docs_Acts
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Acts/row') with ([doc_id] [int], [doc_number] [int], [doc_laboratory] [nchar](10), [doc_date] [datetime], [client_adress_warehouse] [nvarchar](200), [doc_user] [nvarchar](100), [representative] [nvarchar](200), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Acts_Goods]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Acts_Goods]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [good_title] [nvarchar](50) NOT NULL, [production_country] [nvarchar](100) NOT NULL, [places] [int] NULL, [places_unit] [nvarchar](50) NULL, [weight] [numeric](18,4) NULL, [weight_unit] [nvarchar](50) NULL, [samples_count] [int] NULL, primary key ([doc_id] , [good_title] , [production_country] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [good_title] , [production_country] , [places] , [places_unit] , [weight] , [weight_unit] , [samples_count]  from Docs_Acts_Goods
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Acts_Goods/row') with ([doc_id] [int], [good_title] [nvarchar](50), [production_country] [nvarchar](100), [places] [int], [places_unit] [nvarchar](50), [weight] [numeric](18,4), [weight_unit] [nvarchar](50), [samples_count] [int])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Agreements]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Agreements]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_date] [datetime] NOT NULL, [doc_date_limit] [datetime] NOT NULL, [doc_number] [int] NULL, [subject] [nvarchar](100) NULL, [doc_user] [nvarchar](100) NOT NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_date] , [doc_date_limit] , [doc_number] , [subject] , [doc_user] , [client_guid]  from Docs_Agreements
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Agreements/row') with ([doc_id] [int], [doc_date] [datetime], [doc_date_limit] [datetime], [doc_number] [int], [subject] [nvarchar](100), [doc_user] [nvarchar](100), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Bills]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Bills]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_number] [int] NULL, [doc_sum] [numeric](10,2) NOT NULL, [doc_date] [datetime] NULL, [tax_nds] [numeric](6,2) NOT NULL, [is_russia] [bit] NOT NULL, [is_transacted] [bit] NOT NULL, [paydoc_num] [nvarchar](50) NULL, [paydoc_date] [datetime] NULL, [bill_type] [bit] NOT NULL, [line_number] [int] NOT NULL, [doc_user] [nvarchar](100) NOT NULL, [is_cash] [bit] NOT NULL, [fact_address] [nvarchar](500) NULL, [vans] [nvarchar](1000) NULL, primary key ([doc_id] , [bill_type] , [line_number] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_number] , [doc_sum] , [doc_date] , [tax_nds] , [is_russia] , [is_transacted] , [paydoc_num] , [paydoc_date] , [bill_type] , [line_number] , [doc_user] , [is_cash] , [fact_address] , [vans]  from Docs_Bills
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Bills/row') with ([doc_id] [int], [doc_number] [int], [doc_sum] [numeric](10,2), [doc_date] [datetime], [tax_nds] [numeric](6,2), [is_russia] [bit], [is_transacted] [bit], [paydoc_num] [nvarchar](50), [paydoc_date] [datetime], [bill_type] [bit], [line_number] [int], [doc_user] [nvarchar](100), [is_cash] [bit], [fact_address] [nvarchar](500), [vans] [nvarchar](1000))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Bills_Services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Bills_Services]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [bill_type] [bit] NOT NULL, [doc_line_number] [int] NOT NULL, [service_title] [nvarchar](300) NOT NULL, [line_number] [int] NOT NULL, [rate] [numeric](10,2) NOT NULL, [unit] [nvarchar](100) NULL, [count] [numeric](10,2) NOT NULL, [sum] [numeric](25,6) NULL, [sum_factor] [decimal](3,2) NOT NULL, [sum_factor_title] [nvarchar](300) NULL, primary key ([doc_id] , [bill_type] , [doc_line_number] , [service_title] , [line_number] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [bill_type] , [doc_line_number] , [service_title] , [line_number] , [rate] , [unit] , [count] , [sum] , [sum_factor] , [sum_factor_title]  from Docs_Bills_Services
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Bills_Services/row') with ([doc_id] [int], [bill_type] [bit], [doc_line_number] [int], [service_title] [nvarchar](300), [line_number] [int], [rate] [numeric](10,2), [unit] [nvarchar](100), [count] [numeric](10,2), [sum] [numeric](25,6), [sum_factor] [decimal](3,2), [sum_factor_title] [nvarchar](300))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_CO_Objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_CO_Objects]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [title] [nvarchar](50) NOT NULL, [count] [int] NOT NULL, [volume] [numeric](10,2) NOT NULL, [volume_unit] [nvarchar](50) NOT NULL, [rayon] [nvarchar](100) NOT NULL, [exam_trap] [int] NOT NULL, [exam_bait] [int] NOT NULL, [exam_dust] [int] NOT NULL, primary key ([doc_id] , [title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [title] , [count] , [volume] , [volume_unit] , [rayon] , [exam_trap] , [exam_bait] , [exam_dust]  from Docs_CO_Objects
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_CO_Objects/row') with ([doc_id] [int], [title] [nvarchar](50), [count] [int], [volume] [numeric](10,2), [volume_unit] [nvarchar](50), [rayon] [nvarchar](100), [exam_trap] [int], [exam_bait] [int], [exam_dust] [int])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_Examination]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_Examination]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_user] [nvarchar](100) NOT NULL, [doc_number] [int] NULL, [doc_date] [datetime] NULL, [transport_type] [nvarchar](100) NULL, [transport_number] [nvarchar](50) NULL, [bill_type] [nvarchar](100) NULL, [bill_number] [nvarchar](150) NULL, [bill_date] [nvarchar](20) NULL, [sert_number] [nvarchar](50) NULL, [sert_from] [nvarchar](200) NULL, [target_or_source] [nvarchar](1000) NULL, [fact_address] [nvarchar](500) NULL, [karantin_sert_number] [nvarchar](50) NULL, [karantin_sert_date] [nvarchar](50) NULL, [to_document] [nvarchar](500) NULL, [material_from] [nvarchar](500) NULL, [mark] [nvarchar](500) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_user] , [doc_number] , [doc_date] , [transport_type] , [transport_number] , [bill_type] , [bill_number] , [bill_date] , [sert_number] , [sert_from] , [target_or_source] , [fact_address] , [karantin_sert_number] , [karantin_sert_date] , [to_document] , [material_from] , [mark] , [client_guid]  from Docs_Conclusions_Examination
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_Examination/row') with ([doc_id] [int], [doc_user] [nvarchar](100), [doc_number] [int], [doc_date] [datetime], [transport_type] [nvarchar](100), [transport_number] [nvarchar](50), [bill_type] [nvarchar](100), [bill_number] [nvarchar](150), [bill_date] [nvarchar](20), [sert_number] [nvarchar](50), [sert_from] [nvarchar](200), [target_or_source] [nvarchar](1000), [fact_address] [nvarchar](500), [karantin_sert_number] [nvarchar](50), [karantin_sert_date] [nvarchar](50), [to_document] [nvarchar](500), [material_from] [nvarchar](500), [mark] [nvarchar](500), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_Export]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_Export]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_number] [int] NULL, [doc_date] [datetime] NULL, [mark] [nvarchar](100) NULL, [transport_type] [nvarchar](100) NULL, [transport_number] [nvarchar](50) NULL, [bill_type] [nvarchar](100) NULL, [bill_number] [nvarchar](150) NULL, [bill_date] [nvarchar](20) NULL, [sending_to] [nvarchar](100) NOT NULL, [addressee] [nvarchar](200) NULL, [disinfection] [nvarchar](150) NULL, [samples_doc] [nvarchar](200) NULL, [samples_doc_number] [nvarchar](20) NULL, [samples_doc_date] [nvarchar](20) NULL, [samples_action] [nvarchar](300) NULL, [warehouse] [nvarchar](500) NULL, [inspection] [nvarchar](500) NULL, [verdict] [nvarchar](400) NULL, [representative] [nvarchar](50) NULL, [wood_composition] [nvarchar](500) NULL, [origin_rayon] [nvarchar](100) NULL, [origin_text] [nvarchar](200) NULL, [doc_user] [nvarchar](100) NOT NULL, [remark] [nvarchar](500) NOT NULL, [fact_address] [nvarchar](500) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_number] , [doc_date] , [mark] , [transport_type] , [transport_number] , [bill_type] , [bill_number] , [bill_date] , [sending_to] , [addressee] , [disinfection] , [samples_doc] , [samples_doc_number] , [samples_doc_date] , [samples_action] , [warehouse] , [inspection] , [verdict] , [representative] , [wood_composition] , [origin_rayon] , [origin_text] , [doc_user] , [remark] , [fact_address] , [client_guid]  from Docs_Conclusions_Export
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_Export/row') with ([doc_id] [int], [doc_number] [int], [doc_date] [datetime], [mark] [nvarchar](100), [transport_type] [nvarchar](100), [transport_number] [nvarchar](50), [bill_type] [nvarchar](100), [bill_number] [nvarchar](150), [bill_date] [nvarchar](20), [sending_to] [nvarchar](100), [addressee] [nvarchar](200), [disinfection] [nvarchar](150), [samples_doc] [nvarchar](200), [samples_doc_number] [nvarchar](20), [samples_doc_date] [nvarchar](20), [samples_action] [nvarchar](300), [warehouse] [nvarchar](500), [inspection] [nvarchar](500), [verdict] [nvarchar](400), [representative] [nvarchar](50), [wood_composition] [nvarchar](500), [origin_rayon] [nvarchar](100), [origin_text] [nvarchar](200), [doc_user] [nvarchar](100), [remark] [nvarchar](500), [fact_address] [nvarchar](500), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_Import]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_Import]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_number] [int] NULL, [doc_date] [datetime] NULL, [mark] [nvarchar](100) NULL, [transport_type] [nvarchar](100) NULL, [transport_number] [nvarchar](50) NULL, [bill_type] [nvarchar](100) NULL, [bill_number] [nvarchar](150) NULL, [bill_date] [nvarchar](20) NULL, [quality_type] [nvarchar](100) NULL, [quality_number] [nvarchar](50) NULL, [quality_date] [nvarchar](20) NULL, [arrived] [nvarchar](100) NOT NULL, [arrived_rayon] [nvarchar](100) NULL, [ikr_number] [nvarchar](50) NULL, [sert_number] [nvarchar](50) NULL, [sert_from] [nvarchar](200) NULL, [sender] [nvarchar](200) NULL, [disinfection] [nvarchar](150) NULL, [samples_doc] [nvarchar](200) NULL, [samples_doc_number] [nvarchar](20) NULL, [samples_doc_date] [nvarchar](20) NULL, [samples_action] [nvarchar](300) NULL, [warehouse] [nvarchar](500) NULL, [inspection] [nvarchar](500) NULL, [verdict] [nvarchar](500) NULL, [representative] [nvarchar](50) NULL, [doc_user] [nvarchar](100) NOT NULL, [remark] [nvarchar](500) NOT NULL, [fact_address] [nvarchar](500) NULL, [source_type] [nvarchar](500) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_number] , [doc_date] , [mark] , [transport_type] , [transport_number] , [bill_type] , [bill_number] , [bill_date] , [quality_type] , [quality_number] , [quality_date] , [arrived] , [arrived_rayon] , [ikr_number] , [sert_number] , [sert_from] , [sender] , [disinfection] , [samples_doc] , [samples_doc_number] , [samples_doc_date] , [samples_action] , [warehouse] , [inspection] , [verdict] , [representative] , [doc_user] , [remark] , [fact_address] , [source_type] , [client_guid]  from Docs_Conclusions_Import
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_Import/row') with ([doc_id] [int], [doc_number] [int], [doc_date] [datetime], [mark] [nvarchar](100), [transport_type] [nvarchar](100), [transport_number] [nvarchar](50), [bill_type] [nvarchar](100), [bill_number] [nvarchar](150), [bill_date] [nvarchar](20), [quality_type] [nvarchar](100), [quality_number] [nvarchar](50), [quality_date] [nvarchar](20), [arrived] [nvarchar](100), [arrived_rayon] [nvarchar](100), [ikr_number] [nvarchar](50), [sert_number] [nvarchar](50), [sert_from] [nvarchar](200), [sender] [nvarchar](200), [disinfection] [nvarchar](150), [samples_doc] [nvarchar](200), [samples_doc_number] [nvarchar](20), [samples_doc_date] [nvarchar](20), [samples_action] [nvarchar](300), [warehouse] [nvarchar](500), [inspection] [nvarchar](500), [verdict] [nvarchar](500), [representative] [nvarchar](50), [doc_user] [nvarchar](100), [remark] [nvarchar](500), [fact_address] [nvarchar](500), [source_type] [nvarchar](500), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_Karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_Karantin]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [good_title] [nvarchar](50) NOT NULL, [production_country] [nvarchar](100) NOT NULL, [object_title] [nvarchar](50) NOT NULL, [count] [numeric](8,2) NULL, [count_unit] [nvarchar](50) NULL, [state] [nvarchar](50) NULL, primary key ([doc_id] , [good_title] , [production_country] , [object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [good_title] , [production_country] , [object_title] , [count] , [count_unit] , [state]  from Docs_Conclusions_Karantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_Karantin/row') with ([doc_id] [int], [good_title] [nvarchar](50), [production_country] [nvarchar](100), [object_title] [nvarchar](50), [count] [numeric](8,2), [count_unit] [nvarchar](50), [state] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_NotKarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_NotKarantin]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [good_title] [nvarchar](50) NOT NULL, [production_country] [nvarchar](100) NOT NULL, [object_title] [nvarchar](50) NOT NULL, [state] [nvarchar](50) NULL, primary key ([doc_id] , [good_title] , [production_country] , [object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [good_title] , [production_country] , [object_title] , [state]  from Docs_Conclusions_NotKarantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_NotKarantin/row') with ([doc_id] [int], [good_title] [nvarchar](50), [production_country] [nvarchar](100), [object_title] [nvarchar](50), [state] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_Conclusions_Objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_Conclusions_Objects]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [doc_number] [int] NULL, [doc_date] [datetime] NULL, [representative] [nvarchar](50) NULL, [verdict] [nvarchar](max) NULL, [conclusion] [nvarchar](max) NULL, [doc_user] [nvarchar](100) NULL, [category] [nvarchar](50) NOT NULL, [target] [nvarchar](500) NULL, [samples] [nvarchar](max) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([doc_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [doc_number] , [doc_date] , [representative] , [verdict] , [conclusion] , [doc_user] , [category] , [target] , [samples] , [client_guid]  from Docs_Conclusions_Objects
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_Conclusions_Objects/row') with ([doc_id] [int], [doc_number] [int], [doc_date] [datetime], [representative] [nvarchar](50), [verdict] [nvarchar](max), [conclusion] [nvarchar](max), [doc_user] [nvarchar](100), [category] [nvarchar](50), [target] [nvarchar](500), [samples] [nvarchar](max), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_COO_Examinations]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_COO_Examinations]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [title] [nvarchar](50) NOT NULL, [object_title] [nvarchar](100) NOT NULL, [volume] [numeric](10,2) NOT NULL, primary key ([doc_id] , [title] , [object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [title] , [object_title] , [volume]  from Docs_COO_Examinations
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_COO_Examinations/row') with ([doc_id] [int], [title] [nvarchar](50), [object_title] [nvarchar](100), [volume] [numeric](10,2))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_COO_Karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_COO_Karantin]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [title] [nvarchar](50) NOT NULL, [object_title] [nvarchar](100) NOT NULL, [exam_method] [nvarchar](50) NOT NULL, [exam_count] [int] NOT NULL, primary key ([doc_id] , [title] , [object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [title] , [object_title] , [exam_method] , [exam_count]  from Docs_COO_Karantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_COO_Karantin/row') with ([doc_id] [int], [title] [nvarchar](50), [object_title] [nvarchar](100), [exam_method] [nvarchar](50), [exam_count] [int])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_Docs_COO_NotKarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_Docs_COO_NotKarantin]
(
)
RETURNS @result TABLE 
(
	[doc_id] [int] NOT NULL, [title] [nvarchar](50) NOT NULL, [object_title] [nvarchar](100) NOT NULL, [exam_method] [nvarchar](50) NOT NULL, [exam_count] [int] NOT NULL, primary key ([doc_id] , [title] , [object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [doc_id] , [title] , [object_title] , [exam_method] , [exam_count]  from Docs_COO_NotKarantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/Docs_COO_NotKarantin/row') with ([doc_id] [int], [title] [nvarchar](50), [object_title] [nvarchar](100), [exam_method] [nvarchar](50), [exam_count] [int])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_banks]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_banks]
(
)
RETURNS @result TABLE 
(
	[bank_bik] [numeric](10,0) NOT NULL, [bank_corr_acc] [numeric](20,0) NULL, [bank_title] [nvarchar](50) NULL, [bank_city] [nvarchar](50) NULL, [bank_adress] [nvarchar](200) NULL, primary key ([bank_bik] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [bank_bik] , [bank_corr_acc] , [bank_title] , [bank_city] , [bank_adress]  from R_banks
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_banks/row') with ([bank_bik] [numeric](10,0), [bank_corr_acc] [numeric](20,0), [bank_title] [nvarchar](50), [bank_city] [nvarchar](50), [bank_adress] [nvarchar](200))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_bill]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_bill]
(
)
RETURNS @result TABLE 
(
	[bill_title] [nvarchar](100) NOT NULL, primary key ([bill_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [bill_title]  from R_bill
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_bill/row') with ([bill_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_bill_patterns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_bill_patterns]
(
)
RETURNS @result TABLE 
(
	[title] [nvarchar](100) NOT NULL, primary key ([title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [title]  from R_bill_patterns
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_bill_patterns/row') with ([title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_bill_patterns_services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_bill_patterns_services]
(
)
RETURNS @result TABLE 
(
	[pattern_title] [nvarchar](100) NOT NULL, [service_title] [nvarchar](300) NOT NULL, primary key ([pattern_title] , [service_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [pattern_title] , [service_title]  from R_bill_patterns_services
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_bill_patterns_services/row') with ([pattern_title] [nvarchar](100), [service_title] [nvarchar](300))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_client_types]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_client_types]
(
)
RETURNS @result TABLE 
(
	[type_title] [nvarchar](50) NOT NULL, primary key ([type_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [type_title]  from R_client_types
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_client_types/row') with ([type_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_clients]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_clients]
(
)
RETURNS @result TABLE 
(
	[client_name] [nvarchar](300) NOT NULL, [client_inn] [nvarchar](12) NOT NULL, [client_kpp] [nvarchar](19) NULL, [client_adress] [nvarchar](500) NULL, [client_adress_fact] [nvarchar](500) NULL, [client_adress_warehouse] [nvarchar](500) NULL, [client_phone] [nchar](20) NULL, [client_bank_bik] [numeric](10,0) NULL, [client_bank_account] [numeric](20,0) NULL, [client_region] [nvarchar](50) NULL, [client_region_rayon] [nvarchar](50) NULL, [client_representative] [nvarchar](50) NULL, [client_type] [nvarchar](50) NULL, [client_face_agreement] [nvarchar](500) NULL, [client_guid] [uniqueidentifier] NOT NULL, primary key ([client_guid] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [client_name] , [client_inn] , [client_kpp] , [client_adress] , [client_adress_fact] , [client_adress_warehouse] , [client_phone] , [client_bank_bik] , [client_bank_account] , [client_region] , [client_region_rayon] , [client_representative] , [client_type] , [client_face_agreement] , [client_guid]  from R_clients
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_clients/row') with ([client_name] [nvarchar](300), [client_inn] [nvarchar](12), [client_kpp] [nvarchar](19), [client_adress] [nvarchar](500), [client_adress_fact] [nvarchar](500), [client_adress_warehouse] [nvarchar](500), [client_phone] [nchar](20), [client_bank_bik] [numeric](10,0), [client_bank_account] [numeric](20,0), [client_region] [nvarchar](50), [client_region_rayon] [nvarchar](50), [client_representative] [nvarchar](50), [client_type] [nvarchar](50), [client_face_agreement] [nvarchar](500), [client_guid] [uniqueidentifier])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_countries]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_countries]
(
)
RETURNS @result TABLE 
(
	[country_title] [nvarchar](100) NOT NULL, [country_in] [nvarchar](50) NULL, [country_out] [nvarchar](50) NULL, [is_russia] [bit] NULL, [country_sert] [nvarchar](500) NULL, primary key ([country_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [country_title] , [country_in] , [country_out] , [is_russia] , [country_sert]  from R_countries
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_countries/row') with ([country_title] [nvarchar](100), [country_in] [nvarchar](50), [country_out] [nvarchar](50), [is_russia] [bit], [country_sert] [nvarchar](500))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_delivery_foundation]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_delivery_foundation]
(
)
RETURNS @result TABLE 
(
	[foundation_title] [nvarchar](100) NOT NULL, primary key ([foundation_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [foundation_title]  from R_delivery_foundation
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_delivery_foundation/row') with ([foundation_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_divisions]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_divisions]
(
)
RETURNS @result TABLE 
(
	[division_number] [nvarchar](2) NOT NULL, [division_title] [nvarchar](200) NULL, primary key ([division_number] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [division_number] , [division_title]  from R_divisions
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_divisions/row') with ([division_number] [nvarchar](2), [division_title] [nvarchar](200))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_examinations]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_examinations]
(
)
RETURNS @result TABLE 
(
	[examination_title] [nvarchar](30) NOT NULL, primary key ([examination_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [examination_title]  from R_examinations
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_examinations/row') with ([examination_title] [nvarchar](30))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_goods]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_goods]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](50) NOT NULL, [good_title] [nvarchar](50) NOT NULL, primary key ([good_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title] , [good_title]  from R_goods
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_goods/row') with ([group_title] [nvarchar](50), [good_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_goods_exams]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_goods_exams]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](50) NOT NULL, [examination_title] [nvarchar](30) NOT NULL, primary key ([group_title] , [examination_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title] , [examination_title]  from R_goods_exams
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_goods_exams/row') with ([group_title] [nvarchar](50), [examination_title] [nvarchar](30))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_goods_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_goods_groups]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](50) NOT NULL, [weight_unit] [nvarchar](50) NULL, [is_forest] [bit] NOT NULL, [category_title] [nvarchar](150) NULL, primary key ([group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title] , [weight_unit] , [is_forest] , [category_title]  from R_goods_groups
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_goods_groups/row') with ([group_title] [nvarchar](50), [weight_unit] [nvarchar](50), [is_forest] [bit], [category_title] [nvarchar](150))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_goods_groups_categories]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_goods_groups_categories]
(
)
RETURNS @result TABLE 
(
	[category_title] [nvarchar](150) NOT NULL, primary key ([category_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [category_title]  from R_goods_groups_categories
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_goods_groups_categories/row') with ([category_title] [nvarchar](150))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_inspection]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_inspection]
(
)
RETURNS @result TABLE 
(
	[region_number] [nvarchar](2) NOT NULL, [director_div_karantin] [nvarchar](150) NULL, [director] [nvarchar](150) NULL, [accountant] [nvarchar](150) NULL, [title] [nvarchar](500) NULL, [title_short] [nvarchar](200) NULL, [adress] [nvarchar](500) NULL, [telephone] [nvarchar](50) NULL, [fax] [nvarchar](50) NULL, [addressee] [nvarchar](500) NULL, [bank_title] [nvarchar](200) NULL, [bank_caccount] [numeric](20,0) NULL, [bank_saccount] [numeric](20,0) NULL, [bank_bik] [nvarchar](12) NULL, [bank_city] [nvarchar](100) NULL, [payment_target] [nvarchar](500) NULL, [agreement_note] [nvarchar](max) NULL, [inn] [nchar](12) NULL, [kpp] [numeric](9,0) NULL, [payment_adressee] [nvarchar](500) NULL, primary key ([region_number] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [region_number] , [director_div_karantin] , [director] , [accountant] , [title] , [title_short] , [adress] , [telephone] , [fax] , [addressee] , [bank_title] , [bank_caccount] , [bank_saccount] , [bank_bik] , [bank_city] , [payment_target] , [agreement_note] , [inn] , [kpp] , [payment_adressee]  from R_inspection
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_inspection/row') with ([region_number] [nvarchar](2), [director_div_karantin] [nvarchar](150), [director] [nvarchar](150), [accountant] [nvarchar](150), [title] [nvarchar](500), [title_short] [nvarchar](200), [adress] [nvarchar](500), [telephone] [nvarchar](50), [fax] [nvarchar](50), [addressee] [nvarchar](500), [bank_title] [nvarchar](200), [bank_caccount] [numeric](20,0), [bank_saccount] [numeric](20,0), [bank_bik] [nvarchar](12), [bank_city] [nvarchar](100), [payment_target] [nvarchar](500), [agreement_note] [nvarchar](max), [inn] [nchar](12), [kpp] [numeric](9,0), [payment_adressee] [nvarchar](500))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_inspections]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_inspections]
(
)
RETURNS @result TABLE 
(
	[inspection_id] [int] NOT NULL, [inspection_title] [nvarchar](500) NULL, primary key ([inspection_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [inspection_id] , [inspection_title]  from R_inspections
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_inspections/row') with ([inspection_id] [int], [inspection_title] [nvarchar](500))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_karantin]
(
)
RETURNS @result TABLE 
(
	[object_title] [nvarchar](100) NOT NULL, [examination] [nvarchar](30) NOT NULL, [group_title] [nvarchar](100) NOT NULL, [object_title_latin] [nvarchar](100) NULL, primary key ([object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [object_title] , [examination] , [group_title] , [object_title_latin]  from R_karantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_karantin/row') with ([object_title] [nvarchar](100), [examination] [nvarchar](30), [group_title] [nvarchar](100), [object_title_latin] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_karantin_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_karantin_groups]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](100) NOT NULL, primary key ([group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title]  from R_karantin_groups
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_karantin_groups/row') with ([group_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_karantin_state]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_karantin_state]
(
)
RETURNS @result TABLE 
(
	[state_title] [nvarchar](50) NOT NULL, primary key ([state_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [state_title]  from R_karantin_state
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_karantin_state/row') with ([state_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_marking]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_marking]
(
)
RETURNS @result TABLE 
(
	[mark_title] [nvarchar](100) NOT NULL, primary key ([mark_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [mark_title]  from R_marking
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_marking/row') with ([mark_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_notkarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_notkarantin]
(
)
RETURNS @result TABLE 
(
	[object_title] [nvarchar](100) NOT NULL, [examination] [nvarchar](30) NOT NULL, [group_title] [nvarchar](100) NOT NULL, [object_title_latin] [nvarchar](100) NULL, primary key ([object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [object_title] , [examination] , [group_title] , [object_title_latin]  from R_notkarantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_notkarantin/row') with ([object_title] [nvarchar](100), [examination] [nvarchar](30), [group_title] [nvarchar](100), [object_title_latin] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_notkarantin_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_notkarantin_groups]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](100) NOT NULL, primary key ([group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title]  from R_notkarantin_groups
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_notkarantin_groups/row') with ([group_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_objects]
(
)
RETURNS @result TABLE 
(
	[object_title] [nvarchar](50) NOT NULL, [group_title] [nvarchar](50) NOT NULL, primary key ([object_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [object_title] , [group_title]  from R_objects
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_objects/row') with ([object_title] [nvarchar](50), [group_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_objects_categories]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_objects_categories]
(
)
RETURNS @result TABLE 
(
	[category_title] [nvarchar](50) NOT NULL, primary key ([category_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [category_title]  from R_objects_categories
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_objects_categories/row') with ([category_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_objects_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_objects_groups]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](50) NOT NULL, primary key ([group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title]  from R_objects_groups
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_objects_groups/row') with ([group_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_objects_groups_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_objects_groups_karantin]
(
)
RETURNS @result TABLE 
(
	[karantin_title] [nvarchar](100) NOT NULL, [object_group_title] [nvarchar](50) NOT NULL, primary key ([karantin_title] , [object_group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [karantin_title] , [object_group_title]  from R_objects_groups_karantin
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_objects_groups_karantin/row') with ([karantin_title] [nvarchar](100), [object_group_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_objects_target_type]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_objects_target_type]
(
)
RETURNS @result TABLE 
(
	[type_id] [int] NOT NULL, [type_text] [nvarchar](500) NOT NULL, primary key ([type_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [type_id] , [type_text]  from R_objects_target_type
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_objects_target_type/row') with ([type_id] [int], [type_text] [nvarchar](500))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_places_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_places_units]
(
)
RETURNS @result TABLE 
(
	[unit_title] [nvarchar](50) NOT NULL, primary key ([unit_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [unit_title]  from R_places_units
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_places_units/row') with ([unit_title] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_samples_actions]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_samples_actions]
(
)
RETURNS @result TABLE 
(
	[action_title] [nvarchar](300) NOT NULL, primary key ([action_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [action_title]  from R_samples_actions
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_samples_actions/row') with ([action_title] [nvarchar](300))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_samples_source_type]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_samples_source_type]
(
)
RETURNS @result TABLE 
(
	[type_id] [int] NOT NULL, [type_text] [nvarchar](500) NOT NULL, primary key ([type_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [type_id] , [type_text]  from R_samples_source_type
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_samples_source_type/row') with ([type_id] [int], [type_text] [nvarchar](500))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_services]
(
)
RETURNS @result TABLE 
(
	[title] [nvarchar](300) NOT NULL, [title_short] [nvarchar](100) NOT NULL, [unit] [nvarchar](100) NOT NULL, [rate] [numeric](10,2) NOT NULL, [group_title] [nvarchar](100) NOT NULL, primary key ([title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [title] , [title_short] , [unit] , [rate] , [group_title]  from R_services
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_services/row') with ([title] [nvarchar](300), [title_short] [nvarchar](100), [unit] [nvarchar](100), [rate] [numeric](10,2), [group_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_services_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_services_groups]
(
)
RETURNS @result TABLE 
(
	[group_title] [nvarchar](100) NOT NULL, [group_factor] [numeric](10,2) NOT NULL, primary key ([group_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [group_title] , [group_factor]  from R_services_groups
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_services_groups/row') with ([group_title] [nvarchar](100), [group_factor] [numeric](10,2))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_services_sum_factors]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_services_sum_factors]
(
)
RETURNS @result TABLE 
(
	[sum_factor] [decimal](3,2) NOT NULL, [title] [nvarchar](300) NOT NULL, [title_short] [nvarchar](100) NOT NULL, primary key ([sum_factor] , [title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [sum_factor] , [title] , [title_short]  from R_services_sum_factors
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_services_sum_factors/row') with ([sum_factor] [decimal](3,2), [title] [nvarchar](300), [title_short] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_services_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_services_units]
(
)
RETURNS @result TABLE 
(
	[unit_title] [nvarchar](100) NOT NULL, primary key ([unit_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [unit_title]  from R_services_units
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_services_units/row') with ([unit_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_Sverdlovsk_region_rayons]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_Sverdlovsk_region_rayons]
(
)
RETURNS @result TABLE 
(
	[rayon_title] [nvarchar](100) NOT NULL, primary key ([rayon_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [rayon_title]  from R_Sverdlovsk_region_rayons
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_Sverdlovsk_region_rayons/row') with ([rayon_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_transport]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_transport]
(
)
RETURNS @result TABLE 
(
	[transport_title] [nvarchar](100) NOT NULL, primary key ([transport_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [transport_title]  from R_transport
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_transport/row') with ([transport_title] [nvarchar](100))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_users]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_users]
(
)
RETURNS @result TABLE 
(
	[user_name] [nvarchar](100) NOT NULL, [user_division] [nvarchar](2) NOT NULL, [password_hash] [int] NOT NULL, [restricts] [nvarchar](50) NULL, primary key ([user_name] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [user_name] , [user_division] , [password_hash] , [restricts]  from R_users
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_users/row') with ([user_name] [nvarchar](100), [user_division] [nvarchar](2), [password_hash] [int], [restricts] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_verdict_patterns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_verdict_patterns]
(
)
RETURNS @result TABLE 
(
	[pattern_id] [int] NOT NULL, [pattern_text] [nvarchar](400) NOT NULL, primary key ([pattern_id] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [pattern_id] , [pattern_text]  from R_verdict_patterns
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_verdict_patterns/row') with ([pattern_id] [int], [pattern_text] [nvarchar](400))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_weight_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_weight_units]
(
)
RETURNS @result TABLE 
(
	[unit_title] [nvarchar](50) NOT NULL, [mnemonic] [nvarchar](50) NULL, primary key ([unit_title] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [unit_title] , [mnemonic]  from R_weight_units
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_weight_units/row') with ([unit_title] [nvarchar](50), [mnemonic] [nvarchar](50))
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[ATF_R_wood_composition]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ATF_R_wood_composition]
(
)
RETURNS @result TABLE 
(
	[text] [nvarchar](100) NOT NULL, [is_kind] [bit] NULL, [is_board] [bit] NULL, [is_timber] [bit] NULL, primary key ([text] ) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select [text] , [is_kind] , [is_board] , [is_timber]  from R_wood_composition
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N'/tables/R_wood_composition/row') with ([text] [nvarchar](100), [is_kind] [bit], [is_board] [bit], [is_timber] [bit])
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[countries_list]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[countries_list]
(
	@date_low datetime,
	@date_high datetime,
	@group_title varchar(100)
)
RETURNS varchar(max)
AS
BEGIN
	declare @all varchar(max)
	set @all = ''
	declare @country varchar(50)

	DECLARE cur cursor for
	SELECT distinct production_country from report_moscow_11_1
	where doc_date >= @date_low and doc_date < @date_high 
		and group_title = @group_title and not weight_unit is null
	order by production_country

	open cur

	FETCH NEXT FROM cur into @country
	WHILE @@FETCH_STATUS = 0
	BEGIN
	   set @all = @all + @country + ', '
	   FETCH NEXT FROM cur into @country
	END

	CLOSE cur
	DEALLOCATE cur
	RETURN left(@all,len(@all)-1)
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_examinations_forest]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_examinations_forest] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	number int,
	rayon nvarchar(100),
	client_name nvarchar(100),
	title nvarchar(100),
	volume nvarchar(100),
	pests varchar(200),
	style_name varchar(20)
--	shifts varchar(20)
)
AS
BEGIN
	--фильтр на вид report_examinations_01 по датам
	declare @view table(
		title nvarchar(100),
		doc_id int,
		rayon nvarchar(100),
		client_name nvarchar(100),
		volume float,
		volume_unit nvarchar(100),
		pests varchar(200)
	)
	insert @view
		select title, doc_id, rayon,client_name,volume,volume_unit,pests
		from report_examinations_01
		where doc_date >= @date_low and doc_date <= @date_high
		and group_title in ('нижние склады леса')

	--курсор по документам объектам
	declare @doc_id int
	declare documents cursor for
		select distinct doc_id from @view

	declare @cnt int
	set @cnt = 1

	open documents
	fetch next from documents into @doc_id
	while @@FETCH_STATUS = 0
	begin
		--курсор по объектам в документе
		declare @title varchar(100)
		declare titles cursor for
			select title from @view where doc_id = @doc_id

		open titles
		fetch next from titles into @title
		insert @result_table
			select @cnt, rayon, client_name, title, 
				convert(nvarchar,volume) + ' ' + volume_unit, pests, 'T'
			from @view where doc_id = @doc_id and title = @title

		fetch next from titles into @title
		while @@FETCH_STATUS = 0
		begin
			insert @result_table
				select null, null, null, title,
					convert(nvarchar,volume) + ' ' + volume_unit, pests, ''
				from @view where doc_id = @doc_id and title = @title
	
			fetch next from titles into @title
		end 
		close titles
		deallocate titles 

		set @cnt = @cnt + 1		

		fetch next from documents into @doc_id
	end
	close documents
	deallocate documents 

	insert @result_table 
		select null,null,null,'Итого:',null,null,'T'

	--добавляем суммы по единицам измерения
	--курсор по суммам
	declare @volume_unit nvarchar(100), @volume float
	declare sums cursor for
		select volume_unit, sum(volume)
		from @view
		group by volume_unit

	open sums
	fetch next from sums into @volume_unit, @volume
	while @@FETCH_STATUS = 0
	begin
		insert @result_table 
			select null,null,null,null,
			convert(nvarchar,@volume) + ' ' + @volume_unit,null,''

		fetch next from sums into @volume_unit, @volume
	end
	close sums
	deallocate sums 

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_examinations_garden]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_examinations_garden] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	number int,
	rayon nvarchar(100),
	client_name nvarchar(100),
	title nvarchar(100),
	[count] int,
	volume nvarchar(100),
	pests varchar(1000),
	style_name varchar(20)
--	shifts varchar(20)
)
AS
BEGIN
	--фильтр на вид report_examinations_01 по датам
	declare @view table(
		title nvarchar(100),
		doc_id int,
		rayon nvarchar(100),
		client_name nvarchar(500),
		[count] int,
		volume float,
		volume_unit nvarchar(100),
		pests varchar(1000)
	)
	insert @view
		select title, doc_id, rayon,client_name,[count],volume,volume_unit,pests
		from report_examinations_01
		where doc_date >= @date_low and doc_date <= @date_high
		and group_title in ('питомники')

	--курсор по документам объектам
	declare @doc_id int
	declare documents cursor for
		select distinct doc_id from @view

	declare @cnt int
	set @cnt = 1

	open documents
	fetch next from documents into @doc_id
	while @@FETCH_STATUS = 0
	begin
		--курсор по объектам в документе
		declare @title varchar(100)
		declare titles cursor for
			select title from @view where doc_id = @doc_id

		open titles
		fetch next from titles into @title
		insert @result_table
			select @cnt, rayon, client_name, title, [count],
				convert(nvarchar,volume) + ' ' + volume_unit, pests, 'T'
			from @view where doc_id = @doc_id and title = @title

		fetch next from titles into @title
		while @@FETCH_STATUS = 0
		begin
			insert @result_table
				select null, null, null, title, [count],
					convert(nvarchar,volume) + ' ' + volume_unit, pests, ''
				from @view where doc_id = @doc_id and title = @title
	
			fetch next from titles into @title
		end 
		close titles
		deallocate titles 

		set @cnt = @cnt + 1		

		fetch next from documents into @doc_id
	end
	close documents
	deallocate documents 

	insert @result_table 
		select null,null,null,'Итого:',null,null,null,'T'

	--добавляем суммы по единицам измерения
	--курсор по суммам
	declare @volume_unit nvarchar(100), @volume float
	declare sums cursor for
		select volume_unit, sum(volume)
		from @view
		group by volume_unit

	open sums
	fetch next from sums into @volume_unit, @volume
	while @@FETCH_STATUS = 0
	begin
		insert @result_table 
			select null,null,null,null,null,
			convert(nvarchar,@volume) + ' ' + @volume_unit,null,''

		fetch next from sums into @volume_unit, @volume
	end
	close sums
	deallocate sums 

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_examinations_hothouse]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_examinations_hothouse] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	number int,
	rayon nvarchar(100),
	client_name nvarchar(100),
	title nvarchar(100),
	[count] int,
	volume nvarchar(100),
	pests varchar(200),
	style_name varchar(20)
--	shifts varchar(20)
)
AS
BEGIN
	--фильтр на вид report_examinations_01 по датам
	declare @view table(
		title nvarchar(100),
		doc_id int,
		rayon nvarchar(100),
		client_name nvarchar(100),
		[count] int,
		volume float,
		volume_unit nvarchar(100),
		pests varchar(200)
	)
	insert @view
		select title, doc_id, rayon,client_name,[count],volume,volume_unit,pests
		from report_examinations_01
		where doc_date >= @date_low and doc_date <= @date_high
		and group_title in ('оранжереи и теплицы')

	--курсор по документам объектам
	declare @doc_id int
	declare documents cursor for
		select distinct doc_id from @view

	declare @cnt int
	set @cnt = 1

	open documents
	fetch next from documents into @doc_id
	while @@FETCH_STATUS = 0
	begin
		--курсор по объектам в документе
		declare @title varchar(100)
		declare titles cursor for
			select title from @view where doc_id = @doc_id

		open titles
		fetch next from titles into @title
		insert @result_table
			select @cnt, rayon, client_name, title, [count],
				convert(nvarchar,volume) + ' ' + volume_unit, pests, 'T'
			from @view where doc_id = @doc_id and title = @title

		fetch next from titles into @title
		while @@FETCH_STATUS = 0
		begin
			insert @result_table
				select null, null, null, title, [count],
					convert(nvarchar,volume) + ' ' + volume_unit, pests, ''
				from @view where doc_id = @doc_id and title = @title
	
			fetch next from titles into @title
		end 
		close titles
		deallocate titles 

		set @cnt = @cnt + 1		

		fetch next from documents into @doc_id
	end
	close documents
	deallocate documents 

	insert @result_table 
		select null,null,null,'Итого:',null,null,null,'T'

	--добавляем суммы по единицам измерения
	--курсор по суммам
	declare @volume_unit nvarchar(100), @volume float
	declare sums cursor for
		select volume_unit, sum(volume)
		from @view
		group by volume_unit

	open sums
	fetch next from sums into @volume_unit, @volume
	while @@FETCH_STATUS = 0
	begin
		insert @result_table 
			select null,null,null,null,null,
			convert(nvarchar,@volume) + ' ' + @volume_unit,null,''

		fetch next from sums into @volume_unit, @volume
	end
	close sums
	deallocate sums 

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_examinations_warehouse]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_examinations_warehouse] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	number int,
	rayon nvarchar(100),
	client_name nvarchar(100),
	title nvarchar(100),
	[count] int,
	volume nvarchar(100),
	trap int,
	bait int,
	pests varchar(1000),
	style_name varchar(20)
--	shifts varchar(20)
)
AS
BEGIN
	--фильтр на вид report_examinations_01 по датам
	declare @view table(
		title nvarchar(100),
		doc_id int,
		rayon nvarchar(100),
		client_name nvarchar(100),
		[count] int,
		volume float,
		volume_unit nvarchar(100),
		trap int,
		bait int,
		pests varchar(1000)
	)
	insert @view
		select title, doc_id, rayon,client_name,[count],volume,volume_unit,exam_trap,exam_bait, pests
		from report_examinations_01
		where doc_date >= @date_low and doc_date <= @date_high
		and group_title in ('склад - камера','склады временного хранения','склады предприятий')

	--курсор по документам объектам
	declare @doc_id int
	declare documents cursor for
		select distinct doc_id from @view

	declare @cnt int
	set @cnt = 1

	open documents
	fetch next from documents into @doc_id
	while @@FETCH_STATUS = 0
	begin
		--курсор по объектам в документе
		declare @title varchar(100)
		declare titles cursor for
			select title from @view where doc_id = @doc_id

		open titles
		fetch next from titles into @title
		insert @result_table
			select @cnt, rayon, client_name, title, [count], 
				convert(nvarchar,volume) + ' ' + volume_unit, trap, bait, pests, 'T'
			from @view where doc_id = @doc_id and title = @title

		fetch next from titles into @title
		while @@FETCH_STATUS = 0
		begin
			insert @result_table
				select null, null, null, title, [count], 
					convert(nvarchar,volume) + ' ' + volume_unit, trap, bait, pests, ''
				from @view where doc_id = @doc_id and title = @title
	
			fetch next from titles into @title
		end 
		close titles
		deallocate titles 

		set @cnt = @cnt + 1		

		fetch next from documents into @doc_id
	end
	close documents
	deallocate documents 

	insert @result_table 
		select null,null,null,'Итого:',null,null,null,null,null,'T'

	--добавляем суммы по единицам измерения
	--курсор по суммам
	declare @volume_unit nvarchar(100), @volume float, @count int
	declare sums cursor for
		select volume_unit, sum(volume), sum([count]) 
		from @view
		group by volume_unit

	open sums
	fetch next from sums into @volume_unit, @volume, @count
	while @@FETCH_STATUS = 0
	begin
		insert @result_table 
			select null,null,null,null,@count,
			convert(nvarchar,@volume) + ' ' + @volume_unit,null,null,null,''

		fetch next from sums into @volume_unit, @volume, @count
	end
	close sums
	deallocate sums 

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_form1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[report_form1] 
(
	@date_low datetime, @date_high datetime
)
returns @result_table_result table 
(
	category_title varchar(100), weight_unit varchar(100),
	prod_import decimal, prod_russia decimal, prod_export decimal, prod_all decimal,
	concl_import int, concl_russia int, concl_export int, concl_all int,
	samples_import int, samples_russia int, samples_export int, samples_all int,
	style_name varchar(20), shifts varchar(20)
)
as
begin
	declare @result_table table 
	(
		category_title varchar(100), weight_unit varchar(100),
		prod_import decimal, prod_russia decimal, prod_export decimal, prod_all decimal,
		concl_import int, concl_russia int, concl_export int, concl_all int,
		samples_import int, samples_russia int, samples_export int, samples_all int,
		style_name varchar(20), shifts varchar(20)
	)

	--фильтр на вид report_moscow_11_1 по датам
	declare @view table(
		weight_unit nvarchar(50),
		weight numeric(18, 2),
		production_country nvarchar(100),
		is_russia bit,
		doc_id int,
		doc_date datetime,
		group_title nvarchar(50),
		category_title nvarchar(150),
		country nvarchar(100),
		is_import bit,
		samples_count int
	)

	insert @view
	select weight_unit,	weight,	production_country,	is_russia,	doc_id,	doc_date, group_title,
		--case when category_title='Лесопродукция' then 'Лесопродукция: ' + group_title else category_title end,
		category_title + ': ' + group_title,
		country, is_import, samples_count
	from report_moscow_11_1
	where doc_date >= @date_low and doc_date <= @date_high and not weight_unit is null

	insert @result_table_result
	select 
	base_table.category_title, base_table.weight_unit, 
	ISNULL(prod_import.summa, 0) as prod_import, 
	ISNULL(prod_russia.summa, 0) as prod_russia, 
	ISNULL(prod_export.summa, 0) as prod_export, 
	ISNULL(prod_all.summa, 0) as prod_all,
	ISNULL(concl_import.summa, 0) as concl_import, 
	ISNULL(concl_russia.summa, 0) as concl_russia, 
	ISNULL(concl_export.summa, 0) as concl_export, 
	ISNULL(concl_all.summa, 0) as concl_all,
	ISNULL(samples_import.summa, 0) as samples_import, 
	ISNULL(samples_russia.summa, 0) as samples_russia, 
	ISNULL(samples_export.summa, 0) as samples_export, 
	ISNULL(samples_all.summa, 0) as samples_all,
	'table10' as style_name, '' as shifts
	from 
	(
	select category_title, weight_unit
	from @view
	group by category_title, weight_unit
	) as base_table
	--prod
	left outer join
	(
	select category_title, weight_unit, sum(weight) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 1 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as prod_import on base_table.category_title = prod_import.category_title and base_table.weight_unit = prod_import.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(weight) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where R_countries.is_russia = 1
	group by category_title, weight_unit
	) as prod_russia on base_table.category_title = prod_russia.category_title and base_table.weight_unit = prod_russia.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(weight) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 0 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as prod_export on base_table.category_title = prod_export.category_title and base_table.weight_unit = prod_export.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(weight) as summa
	from @view
	group by category_title, weight_unit
	) as prod_all on base_table.category_title = prod_all.category_title and base_table.weight_unit = prod_all.weight_unit 
	--concl
	left outer join
	(
	select category_title, weight_unit, count(distinct doc_id) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 1 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as concl_import on base_table.category_title = concl_import.category_title and base_table.weight_unit = concl_import.weight_unit 
	left outer join
	(
	select category_title, weight_unit, count(distinct doc_id) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where R_countries.is_russia = 1
	group by category_title, weight_unit
	) as concl_russia on base_table.category_title = concl_russia.category_title and base_table.weight_unit = concl_russia.weight_unit 
	left outer join
	(
	select category_title, weight_unit, count(distinct doc_id) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 0 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as concl_export on base_table.category_title = concl_export.category_title and base_table.weight_unit = concl_export.weight_unit 
	left outer join
	(
	select category_title, weight_unit, count(distinct doc_id) as summa
	from @view
	group by category_title, weight_unit
	) as concl_all on base_table.category_title = concl_all.category_title and base_table.weight_unit = concl_all.weight_unit
	--samples
	left outer join
	(
	select category_title, weight_unit, sum(samples_count) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 1 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as samples_import on base_table.category_title = samples_import.category_title and base_table.weight_unit = samples_import.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(samples_count) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where R_countries.is_russia = 1
	group by category_title, weight_unit
	) as samples_russia on base_table.category_title = samples_russia.category_title and base_table.weight_unit = samples_russia.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(samples_count) as summa
	from @view v
	inner join R_countries on v.country = R_countries.country_title
	where is_import = 0 and R_countries.is_russia = 0
	group by category_title, weight_unit
	) as samples_export on base_table.category_title = samples_export.category_title and base_table.weight_unit = samples_export.weight_unit 
	left outer join
	(
	select category_title, weight_unit, sum(samples_count) as summa
	from @view
	group by category_title, weight_unit
	) as samples_all on base_table.category_title = samples_all.category_title and base_table.weight_unit = samples_all.weight_unit

	order by base_table.category_title, base_table.weight_unit

	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_form21]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[report_form21]
(
	@date_low datetime, @date_high datetime
)
returns @result_table_result table 
(
	empty_cell varchar(1), examination_type varchar(100),
	expert_imp int, expert_rus int, expert_karant int, expert_all int,
	concl_imp int, concl_rus int, concl_karant int, concl_all int,
	concl_expert_imp int, concl_expert_rus int, concl_expert_karant int, concl_expert_all int,
	obrazets_imp int, obrazets_expert_rus int, obrazets_expert_karant int, obrazets_expert_all int,
	karant_types_count int, karant_cases_count int, notkarant_types_count int, notkarant_cases_count int,
	incom_all_with_nds decimal, incom_all_without_nds decimal, incom_karantin_with_nds decimal, incom_karantin_without_nds decimal,
	style_name varchar(20), shifts varchar(20)
)
as
begin
	declare @result_table table 
	(
		empty_cell varchar(1), examination_type varchar(100),
		expert_imp int, expert_rus int, expert_karant int, expert_all int,
		concl_imp int, concl_rus int, concl_karant int, concl_all int,
		concl_expert_imp int, concl_expert_rus int, concl_expert_karant int, concl_expert_all int,
		obrazets_imp int, obrazets_expert_rus int, obrazets_expert_karant int, obrazets_expert_all int,
		karant_types_count int, karant_cases_count int, notkarant_types_count int, notkarant_cases_count int,
		incom_all_with_nds decimal, incom_all_without_nds decimal, incom_karantin_with_nds decimal, incom_karantin_without_nds decimal,
		style_name varchar(20), shifts varchar(20)
	)

	declare @expertises table(
	production_country nvarchar(100), 
	is_russia_production bit, 
	is_russia_document bit, 
	doc_id int, 
	doc_date datetime, 
	group_title nvarchar(50), 
	target_or_source_dir nvarchar(100), 
	samples_count int,
	exams_count int
	)

	insert into @expertises
	select 
	dag.production_country, rc.is_russia as is_russia_production, rc2.is_russia as is_russia_document, dc.doc_id, dc.doc_date, rg.group_title, 
	dc.target_or_source_dir, dag.samples_count, count(rge.group_title) as exams_count
	FROM
	Docs_Conclusions_Examination dc
	inner join ATF_Docs_Acts_Goods() dag ON dc.doc_id = dag.doc_id
	inner join ATF_R_goods() rg ON dag.good_title = rg.good_title 
	inner join ATF_R_goods_exams() rge on rg.group_title = rge.group_title
	left join ATF_R_countries() rc ON dag.production_country = rc.country_title
	left join ATF_R_countries() rc2 ON dc.target_or_source_dir = rc2.country_title
	where doc_date >= @date_low and doc_date <= @date_high
	group by production_country, rc.is_russia, rc2.is_russia, dc.doc_id, dc.doc_date, rg.group_title, dc.target_or_source_dir, dag.samples_count

	declare @conclusions table(
		weight_unit nvarchar(50),
		weight numeric(18, 2),
		production_country nvarchar(100),
		is_russia bit,
		doc_id int,
		doc_date datetime,
		group_title nvarchar(50),
		category_title nvarchar(150),
		country nvarchar(100),		
		is_import bit,
		samples_count int
	)

	insert @conclusions
	select * from report_moscow_11_1
	where doc_date >= @date_low and doc_date <= @date_high and not weight_unit is null

	declare @samples table(
		is_russia_production bit, 
		is_russia_document bit, 
		samples_count int
	)

	insert @samples
	select 
	rc.is_russia as is_russia_production, rc2.is_russia as is_russia_document, dag.samples_count
	FROM
	Docs_Conclusions_Examination dc
	inner join ATF_Docs_Acts_Goods() dag ON dc.doc_id = dag.doc_id
	left join ATF_R_countries() rc ON dag.production_country = rc.country_title
	left join ATF_R_countries() rc2 ON dc.target_or_source_dir = rc2.country_title
	where doc_date >= @date_low and doc_date <= @date_high

	insert @result_table_result
	
	select '', 'Всего, в т. ч.:',
	--------------------
	(select isnull(sum(samples_count*exams_count), 0)
	from @expertises v1
	where v1.is_russia_production = 0 and isnull(v1.is_russia_document, 0) = 0),
	(select isnull(sum(samples_count*exams_count), 0)
	from @expertises v1
	where not (v1.is_russia_production = 0 and isnull(v1.is_russia_document, 0) = 0)),
	(select NULL),
	(select NULL),
	--------------------
	(select count(distinct doc_id)
	from @conclusions v2
	inner join R_countries on v2.country = R_countries.country_title
	where is_import = 1 and R_countries.is_russia = 0),
	(select count(distinct doc_id)
	from @conclusions v2
	inner join R_countries on v2.country = R_countries.country_title
	where not (is_import = 1 and R_countries.is_russia = 0)),
	(select NULL),
	(select NULL),
	--------------------
	(select isnull(count(distinct doc_id), 0)
	from @expertises v1
	where v1.is_russia_production = 0 and isnull(v1.is_russia_document, 0) = 0),
	(select isnull(count(distinct doc_id), 0)
	from @expertises v1
	where not (v1.is_russia_production = 0 and isnull(v1.is_russia_document, 0) = 0)),
	(select NULL),
	(select NULL),
	--------------------
	(select isnull(sum(samples_count), 0)
	from @samples s
	where s.is_russia_production = 0 and isnull(s.is_russia_document, 0) = 0),
	(select isnull(sum(samples_count), 0)
	from @samples s
	where not (s.is_russia_production = 0 and isnull(s.is_russia_document, 0) = 0)),
	(select NULL),
	(select NULL),
	--------------------
	(select NULL),(select NULL),(select NULL),(select NULL),(select NULL),(select NULL),(select NULL),(select NULL),
	--------------------
	'table10', ''

	insert @result_table_result values ('', 'в рамках госзадания', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'table10', '')
	insert @result_table_result values ('', 'сверх госзадания (на платной основе)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'table10', '')
	insert @result_table_result values ('', 'сверх госзадания (из внебюджетных средств)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'table10', '')

	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_form22]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [dbo].[report_form22]
(
	@date_low datetime, @date_high datetime
)
returns @result_table_result table 
(
	empty_cell varchar(1), examination_type varchar(100),
	entomolog_imp int, entomolog_rus int, entomolog_karant int, entomolog_all int,
	micolog_imp int, micolog_rus int, micolog_karant int, micolog_all int,
	virusolog_expert_imp int, virusolog_expert_rus int, virusolog_expert_karant int, virusolog_expert_all int,
	bacteriolog_imp int, bacteriolog_rus int, bacteriolog_karant int, bacteriolog_all int,
	fitogelmintolog_imp int, fitogelmintolog_rus int, fitogelmintolog_karant int, fitogelmintolog_all int,
	gerbolog_imp int, gerbolog_rus int, gerbolog_karant int, gerbolog_all int,	
	style_name varchar(20), shifts varchar(20)
)
as
begin
	declare @result_table table 
	(
		empty_cell varchar(1), examination_type varchar(100),
		entomolog_imp int, entomolog_rus int, entomolog_karant int, entomolog_all int,
		micolog_imp int, micolog_rus int, micolog_karant int, micolog_all int,
		virusolog_expert_imp int, virusolog_expert_rus int, virusolog_expert_karant int, virusolog_expert_all int,
		bacteriolog_imp int, bacteriolog_rus int, bacteriolog_karant int, bacteriolog_all int,
		fitogelmintolog_imp int, fitogelmintolog_rus int, fitogelmintolog_karant int, fitogelmintolog_all int,
		gerbolog_imp int, gerbolog_rus int, gerbolog_karant int, gerbolog_all int,	
		style_name varchar(20), shifts varchar(20)
	)

	declare @view table (
	examination_title varchar(50),
	doc_date datetime,
	is_russia_production bit,
	is_russia_document bit,
	samples_count int
	)

	insert into @view
	select rge.examination_title, Docs_Conclusions_Examination.doc_date, rc1.is_russia, rc2.is_russia, dag.samples_count
	from Docs_Conclusions_Examination
	inner join ATF_Docs_Acts_Goods() dag ON Docs_Conclusions_Examination.doc_id = dag.doc_id 
	inner join ATF_R_goods() rg ON dag.good_title = rg.good_title 
	inner join ATF_R_goods_exams() rge ON rg.group_title = rge.group_title 
	inner join ATF_R_countries() rc1 ON dag.production_country = rc1.country_title
	left join ATF_R_countries() rc2 ON Docs_Conclusions_Examination.target_or_source_dir = rc2.country_title
	where doc_date >= @date_low and doc_date <= @date_high

	insert @result_table_result
	select '', 'Всего, в т. ч.:',
	(select sum(samples_count) from @view where examination_title = 'Энтомологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Энтомологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	(select sum(samples_count) from @view where examination_title = 'Микологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Микологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	(select sum(samples_count) from @view where examination_title = 'Вирусологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Вирусологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	(select sum(samples_count) from @view where examination_title = 'Бактериологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Бактериологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	(select sum(samples_count) from @view where examination_title = 'Фитогельминтологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Фитогельминтологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	(select sum(samples_count) from @view where examination_title = 'Гербологическая' and is_russia_production = 0 and isnull(is_russia_document, 0) = 0),
	(select sum(samples_count) from @view where examination_title = 'Гербологическая' and not (is_russia_production = 0 and isnull(is_russia_document, 0) = 0)),
	(select null),
	(select null),
	'table10', ''

	insert @result_table_result values ('', 'в рамках госзадания', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'table10', '')
	insert @result_table_result values ('', 'сверх госзадания (на платной основе)', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'table10', '')
	insert @result_table_result values ('', 'сверх госзадания (из внебюджетных средств)', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 'table10', '')

	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_form23]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [dbo].[report_form23]
(
	@date_low datetime, @date_high datetime
)
returns @result_table_result table 
(
	karantin varchar(100), karantin_cases_count int, good varchar(100), country_original varchar(100), country_exproter varchar(100),
	karantin_viability varchar(3), karantin_goods_count int, karantin_goods_weight_unit varchar(100),
	all_sample_count int, karantin_sample_count int, expertiza varchar(100),
	style_name varchar(20), shifts varchar(20)
)
as
begin
	declare @result_table table 
	(
		karantin varchar(100), karantin_cases_count int, good varchar(100), country_original varchar(100), country_exproter varchar(100),
		karantin_viability varchar(3), karantin_goods_count int, karantin_goods_weight_unit varchar(100),
		all_sample_count int, karantin_sample_count int, expertiza varchar(100),
		style_name varchar(20), shifts varchar(20)
	)
	insert @result_table_result values ('пример карантинного объекта 1', 7, 'дрова', 'Венгрия', 'Румыния', 'Да', 12, 'кг', 5, 2, 'экспертиза', 'table10', '')

	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_form24]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [dbo].[report_form24]
(
	@date_low datetime, @date_high datetime
)
returns @result_table_result table 
(
	karantin varchar(100), karantin_cases_count int, good varchar(100), country_reciver varchar(100), country_sender varchar(100), country_original varchar(100),
	karantin_viability varchar(3), karantin_goods_count int, karantin_goods_weight_unit varchar(100),
	all_sample_count int, karantin_sample_count int, expertiza varchar(100),
	style_name varchar(20), shifts varchar(20)
)
as
begin
	declare @result_table table 
	(
		karantin varchar(100), karantin_cases_count int, good varchar(100), country_reciver varchar(100), country_sender varchar(100), country_original varchar(100),
		karantin_viability varchar(3), karantin_goods_count int, karantin_goods_weight_unit varchar(100),
		all_sample_count int, karantin_sample_count int, expertiza varchar(100),
		style_name varchar(20), shifts varchar(20)
	)
	insert @result_table_result values ('пример карантинного объекта 1', 7, 'дрова', 'Россия', 'Китай', 'Румыния', 'Да', 12, 'кг', 5, 2, 'экспертиза', 'table10', '')

	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_karantin_objects_01]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_karantin_objects_01] 
(
	@date_low datetime, 
	@date_high datetime,
	@production int
)
RETURNS @result_table TABLE 
(
	number varchar(100),
	karantin_object_title varchar(100),
	event_number varchar(100),
	good_title varchar(100),
	good_production varchar(100),
	inout varchar(1000),
	infected varchar(100),
	count_per_kg  varchar(100),
	style_name varchar(100),
	shifts varchar(100)
)
AS
BEGIN
	--фильтр на вид report_karantin_objects по датам
	declare @view table(
		object_title varchar(100),
		good_title varchar(100),
		good_production varchar(100),
		[in] varchar(1000),
		[out] varchar(1000),
		infected_weight varchar(100),
		infected_unit varchar(100),
		[count] varchar(100),
		count_unit varchar(100)
	)

	declare @s1 bit, @s2 bit

	if @production = 0 
		begin set @s1 = 0; set @s2 = 1 end
	else if @production = 1
		begin set @s1 = 0; set @s2 = 0 end
	else if @production = 2
		begin set @s1 = 1; set @s2 = 1 end

	insert @view
		select object_title, good_title, production_country, importer, exporter,
			weight, weight_unit, [count], count_unit
		from report_karantin_objects
		where doc_date >= @date_low and doc_date <= @date_high and 
		((is_russia = @s1) or (is_russia = @s2))
		order by object_title, good_title

	--курсор по карантинным объектам
	declare @karantin varchar(150), @count int
	declare karantins cursor for
		select object_title, count(*) from @view 
		group by object_title
		order by object_title

	--счётчик
	declare @counter int
	set @counter = 1

	open karantins
	fetch next from karantins into @karantin, @count
	while @@FETCH_STATUS = 0
	begin
		--курсор по случаям заражения
		declare @object_title varchar(100),@good_title varchar(100),@good_production varchar(100),
			@in varchar(100),@out varchar(100),@infected_weight varchar(100),@infected_unit varchar(100),
			@count_karantins varchar(100),@count_unit varchar(100),@event_number_case  varchar(100)
		declare items cursor for
			select * from @view where object_title = @karantin
		
		open items
		fetch next from items into @object_title,@good_title,@good_production,@in,@out,@infected_weight,
			@infected_unit,@count_karantins,@count_unit
		
		--вставляем первую запись		
		declare @shift varchar(100)
		declare @last_good varchar(100)
		set @last_good = ''
		set @shift = '3:0,'+
				convert(varchar,(select count(good_title) from @view 
				where object_title = @karantin and good_title = @good_title)-1)
				+';'
		set @last_good = @good_title

		insert @result_table
			select @counter, @karantin, @count, @good_title, @good_production, 
				isnull(@in,'не указан') + ' / ' + isnull(@out,'не указан'), isnull(@infected_weight + ' ' + @infected_unit,'не указано'),
				@count_karantins + ' ' + @count_unit, 'LTR',
				'0:0,'+convert(varchar, @count-1)+';'+ 
				'1:0,'+convert(varchar, @count-1)+';'+
				'2:0,'+convert(varchar, @count-1)+';'+@shift
		set @counter = @counter + 1
		
		--перебираем записи		
		fetch next from items into @object_title,@good_title,@good_production,@in,@out,@infected_weight,
			@infected_unit,@count_karantins,@count_unit
		while @@FETCH_STATUS = 0
		begin
			
			if @last_good = @good_title
				set @shift = ''
			else
				set @shift = '3:0,'+
				convert(varchar,(select count(good_title) from @view 
				where object_title = @karantin and good_title = @good_title)-1)
				+';'
			set @last_good = @good_title

			insert @result_table
			select '', '', '', @good_title, @good_production, 
				isnull(@in,'не указан') + ' / ' + isnull(@out,'не указан'), isnull(@infected_weight + ' ' + @infected_unit,'не указано'),
				@count_karantins + ' ' + @count_unit, 
				'LTR', @shift

			fetch next from items into @object_title,@good_title,@good_production,@in,@out,@infected_weight,
				@infected_unit,@count_karantins,@count_unit
		end 
		close items
		deallocate items 

		fetch next from karantins into @karantin, @count
	end
	close karantins
	deallocate karantins 

	insert @result_table 
	select '', '', '', '', '', '', '', '', 'T', ''

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_11]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_11]
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table_result TABLE 
(
	good_title varchar(100),
	weight_unit varchar(100),
	prod_imp varchar(50),
	prod_rus varchar(50),
	prod_all varchar(50),
	countries varchar(max),
	concl_imp varchar(50),
	concl_rus varchar(50),
	concl_all varchar(50),
	style_name varchar(20),
	shifts varchar(20)
)
AS
BEGIN
	declare @result_table TABLE 
	(
		good_title varchar(100),
		weight_unit varchar(100),
		prod_imp varchar(50),
		prod_rus varchar(50),
		prod_all varchar(50),
		countries varchar(max),
		concl_imp varchar(50),
		concl_rus varchar(50),
		concl_all varchar(50),
		style_name varchar(20),
		shifts varchar(20),
		_number int identity
	)
	--фильтр на вид report_moscow_11_1 по датам
	declare @view table(
		weight_unit varchar(50),
		weight numeric(18, 2),
		production_country varchar(100),
		is_russia bit,
		doc_id int,
		doc_date datetime,
		group_title varchar(50),
		category_title varchar(150),
		country varchar(100),
		is_import bit,
		samples_count int
	)

	insert @view
	select * from report_moscow_11_1
	where doc_date >= @date_low and doc_date <= @date_high and not weight_unit is null
	order by category_title, group_title, weight_unit

	--курсор по категориям
	declare @category varchar(150)
	declare categories cursor for
		select distinct category_title from @view

	open categories
	fetch next from categories into @category
	while @@FETCH_STATUS = 0
	begin
		insert into @result_table values(@category,'','','','','','','','','LTRCB12','0:8,0;')

		--курсор по группам в категории
		declare @group varchar(50)
		declare groups cursor for
			select distinct group_title from @view where category_title = @category
		open groups
		fetch next from groups into @group
		while @@FETCH_STATUS = 0
		begin

			--курсор по единицам измерения
			declare @unit varchar(50)
			declare units cursor for
				select distinct weight_unit from @view 
				where category_title = @category and group_title = @group
			--число строк в курсоре
			declare @units_count int
			set @units_count = 
				(select count(distinct weight_unit) from @view 
				where category_title = @category and group_title = @group)
	
			declare @all varchar(max)
			set @all = ''
			declare @country varchar(50)

			DECLARE cur cursor for
			SELECT distinct production_country from @view
			where group_title = @group and not weight_unit is null
			order by production_country

			open cur

			FETCH NEXT FROM cur into @country
			WHILE @@FETCH_STATUS = 0
			BEGIN
			   set @all = @all + @country + ', '
			   FETCH NEXT FROM cur into @country
			END

			CLOSE cur
			DEALLOCATE cur
			set @all = left(@all,len(@all)-1)


			open units
			fetch next from units into @unit
			--здесь вставить первую запись в результат
			insert @result_table 
				select @group,@unit,
					    (select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit and is_russia = 0),
						(select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit and is_russia = 1),
						(select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit),
						@all,
						(select count(distinct doc_id) from @view where group_title = @group and is_russia = 0),
						(select count(distinct doc_id) from @view where group_title = @group and is_russia = 1),
						(select count(distinct doc_id) from @view where group_title = @group),
						'LTR',
				'0:0,'+convert(varchar(20),@units_count-1)+';5:0,'+convert(varchar(20),@units_count-1)+';'
			fetch next from units into @unit
			while @@FETCH_STATUS = 0
			begin
				insert @result_table 
					select '',@unit,
						(select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit and is_russia = 0),
						(select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit and is_russia = 1),
						(select isnull(sum(weight),0) from @view where group_title = @group and weight_unit = @unit),
						'',
						'',--(select count(distinct doc_id) from @view where group_title = @group and is_russia = 0),
						'',--(select count(distinct doc_id) from @view where group_title = @group and is_russia = 1),
						'',--(select count(distinct doc_id) from @view where group_title = @group),
						'LR',''
				fetch next from units into @unit
			end 
			close units
			deallocate units 		
		
			fetch next from groups into @group
		end 
		close groups
		deallocate groups 

		fetch next from categories into @category
	end
	close categories
	deallocate categories 

	insert @result_table 
		select '','','','','','','','','','T',''

	--select * from @result_table  order by _number
	insert @result_table_result
		select good_title, weight_unit, prod_imp, prod_rus, prod_all, countries, concl_imp, concl_rus,
			concl_all, style_name, shifts
		from @result_table  order by _number

	return 
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_22]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_22] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	examination_title varchar(100),
	ex_imp int,
	ex_rus int,
	ex_all int,
	kar_imp int,
	kar_rus int,
	kar_all int,
	kar1_imp int,
	kar1_rus int,
	kar1_all int,
	notkar_imp int,
	notkar_rus int,
	notkar_all int,
	notkar1_imp int,
	notkar1_rus int,
	notkar1_all int,
	style_name varchar(20)
)
AS
BEGIN
		
	--фильтр для таблицы с количеством
	declare @count table (
		examination_title varchar(50),
		is_russia bit,
		doc_date datetime
	)
	insert @count
		select * from report_moscow_22_count
		where doc_date >= @date_low and doc_date <= @date_high

	--фильтр для таблицы с карантинными
	declare @karantin table (
		examination_title varchar(50),
		is_russia bit,
		doc_date datetime,
		object_title varchar(100)
	)
	insert @karantin
		select * from report_moscow_22_karantin
		where doc_date >= @date_low and doc_date < @date_high

	--фильтр для таблицы с некарантинными
	declare @notkarantin table (
		examination_title varchar(50),
		is_russia bit,
		doc_date datetime,
		object_title varchar(100)
	)
	insert @notkarantin
		select * from report_moscow_22_notkarantin
		where doc_date >= @date_low and doc_date < @date_high

	insert @result_table
	select	R_examinations.examination_title, 
			isnull(ex_imp.cnt,0) as count_imp, 
			isnull(ex_rus.cnt,0) as count_rus, 
			isnull(ex_all.cnt,0) as count_all,
			isnull(kar_imp.cnt,0) as kar_imp,
			isnull(kar_rus.cnt,0) as kar_rus,
			isnull(kar_all.cnt,0) as kar_all,
			isnull(kar1_imp.cnt,0) as kar1_imp,
			isnull(kar1_rus.cnt,0) as kar1_rus,
			isnull(kar1_all.cnt,0) as kar1_all,
			isnull(notkar_imp.cnt,0) as notkar_imp,
			isnull(notkar_rus.cnt,0) as notkar_rus,
			isnull(notkar_all.cnt,0) as notkar_all,
			isnull(notkar1_imp.cnt,0) as notkar1_imp,
			isnull(notkar1_rus.cnt,0) as notkar1_rus,
			isnull(notkar1_all.cnt,0) as notkar1_all,
			'table10'
	from
	--виды экспертиз
	(select * from ATF_R_examinations() re
	union all
	select 'ИТОГО'
	) as R_examinations left join
	--количество экспертиз
	(select examination_title, count(*) as cnt from @count where is_russia = 0 group by examination_title
	union all
	select 'ИТОГО', count(*) as cnt from @count where is_russia = 0
	) as ex_imp on R_examinations.examination_title = ex_imp.examination_title left join

	(select examination_title, count(*) as cnt from @count where is_russia = 1
	group by examination_title
	union all
	select 'ИТОГО', count(*) as cnt from @count where is_russia = 1
	) as ex_rus on R_examinations.examination_title = ex_rus.examination_title left join

	(select examination_title, count(*) as cnt from @count
	group by examination_title
	union all
	select 'ИТОГО', count(*) as cnt from @count
	) as ex_all on R_examinations.examination_title = ex_all.examination_title left join
	--карантинные - число видов
	(select examination_title, count(distinct object_title) as cnt from @karantin where is_russia = 0
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @karantin where is_russia = 0
	) as kar_imp on R_examinations.examination_title = kar_imp.examination_title left join

	(select examination_title, count(distinct object_title) as cnt from @karantin where is_russia = 1
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @karantin where is_russia = 1
	) as kar_rus on R_examinations.examination_title = kar_rus.examination_title left join

	(select examination_title, count(distinct object_title) as cnt from @karantin
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @karantin
	) as kar_all on R_examinations.examination_title = kar_all.examination_title left join
	--карантинные - число случаев
	(select examination_title, count(object_title) as cnt from @karantin where is_russia = 0
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @karantin where is_russia = 0
	) as kar1_imp on R_examinations.examination_title = kar1_imp.examination_title left join

	(select examination_title, count(object_title) as cnt from @karantin where is_russia = 1
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @karantin where is_russia = 1
	) as kar1_rus on R_examinations.examination_title = kar1_rus.examination_title left join

	(select examination_title, count(object_title) as cnt from @karantin
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @karantin
	) as kar1_all on R_examinations.examination_title = kar1_all.examination_title left join
	--некарантинные - число видов
	(select examination_title, count(distinct object_title) as cnt from @notkarantin where is_russia = 0
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @notkarantin where is_russia = 0
	) as notkar_imp on R_examinations.examination_title = notkar_imp.examination_title left join

	(select examination_title, count(distinct object_title) as cnt from @notkarantin where is_russia = 1
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @notkarantin where is_russia = 1
	) as notkar_rus on R_examinations.examination_title = notkar_rus.examination_title left join

	(select examination_title, count(distinct object_title) as cnt from @notkarantin
	group by examination_title
	union all
	select 'ИТОГО', count(distinct object_title) as cnt from @notkarantin
	) as notkar_all on R_examinations.examination_title = notkar_all.examination_title left join
	--некарантинные - число случаев
	(select examination_title, count(object_title) as cnt from @notkarantin where is_russia = 0
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @notkarantin where is_russia = 0
	) as notkar1_imp on R_examinations.examination_title = notkar1_imp.examination_title left join

	(select examination_title, count(object_title) as cnt from @notkarantin where is_russia = 1
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @notkarantin where is_russia = 1
	) as notkar1_rus on R_examinations.examination_title = notkar1_rus.examination_title left join

	(select examination_title, count(object_title) as cnt from @notkarantin
	group by examination_title
	union all
	select 'ИТОГО', count(object_title) as cnt from @notkarantin
	) as notkar1_all on R_examinations.examination_title = notkar1_all.examination_title

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_23]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_23] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	object_title varchar(100),
	object_count int,
	group_title varchar(100),
	country varchar(100),
	weight_unit varchar(50),
	weight numeric(18, 2),
	style_name varchar(20),
	shifts varchar(20)
)
AS
BEGIN
	--фильтр на вид report_moscow_23_1 по датам
	declare @view table(
		doc_date datetime,
		object_title varchar(150),
		group_title varchar(50),
		production_country varchar(100),
		weight_unit varchar(50),
		weight numeric(18, 2)
	)
	insert @view
	select * from report_moscow_23_1
	where doc_date >= @date_low and doc_date <= @date_high

	--курсор по карантинным объектам
	declare @karantin varchar(150), @count int
	declare karantins cursor for
		select object_title, count(*) as cnt from @view group by object_title

	open karantins
	fetch next from karantins into @karantin, @count
	while @@FETCH_STATUS = 0
	begin
		declare @flag bit
		set @flag = 0
		--курсор по товарам, заражённым данным карантинным объектом
		declare @good varchar(50)
		declare goods cursor for
			select distinct group_title from @view where object_title = @karantin
		open goods
		fetch next from goods into @good
		while @@FETCH_STATUS = 0
		begin
			--курсор по происхождению, единицам измерения и объёму
			declare @country varchar(150), @unit varchar(50), @weight numeric(18, 2)
			declare lines cursor for
				select production_country, weight_unit, sum(weight) as weight from @view
				where object_title = @karantin and group_title = @good
				group by production_country, weight_unit
				order by weight_unit, production_country

--			--число строк в курсоре
--			declare @units_count int
--			set @units_count = 
--				(select count(distinct weight_unit) from @view 
--				where category_title = @category and group_title = @group)
--	
			open lines
			fetch next from lines into @country, @unit, @weight
--			--здесь вставить первую запись в результат
			if @flag = 0
				begin
				insert @result_table 
					select @karantin, @count, @good, @country, @unit, @weight, 'LTR', ''
				set @flag = 1
				end
			else
				insert @result_table 
					select '', null, @good, @country, @unit, @weight, 'LR', ''
			fetch next from lines into @country, @unit, @weight
			while @@FETCH_STATUS = 0
			begin
				insert @result_table 
					select '', null, '', @country, @unit, @weight, 'LR', ''

				fetch next from lines into @country, @unit, @weight
			end 
			close lines
			deallocate lines 		
--		
			fetch next from goods into @good
		end 
		close goods
		deallocate goods 

		fetch next from karantins into @karantin, @count
	end
	close karantins
	deallocate karantins 

	insert @result_table 
		select '',null,'','','',null,'T',''

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_31]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_31]
(	
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table table(
	object_title varchar(100),
	object_count int,
	object_volume varchar(200),
	object_exp varchar(1000),
	style_name varchar(20)
)
as
begin
	--фильтр во виду report_moscow_31_1
	declare @view table(
		doc_date datetime,
		category varchar(100),
		volume decimal(12,2),
		volume_unit varchar(100),
		[count] int,
		exam_trap int,
		exam_bait int,
		exam_dust int
	)
	insert @view
		select * from report_moscow_31_1
		where doc_date >= @date_low and doc_date <= @date_high

	--список категорий
	declare @category varchar(100)
	declare categories cursor for
		select category_title from ATF_R_objects_categories()

	open categories
	fetch next from categories into @category
	while @@fetch_status = 0
	begin
		--переменные для записи в отчёт
		declare @cnt int, @vlm varchar(200), @ex1 int, @ex2 int, @ex3 int, @exam varchar(200)
		set @cnt = 0; set @vlm = ''; set @exam = ''; set @ex1 = 0; set @ex2 = 0; set @ex3 = 0;
		--курсор по виду
		declare @volume decimal(12,2), @volume_unit varchar(100), @count int,
			@exam_trap int, @exam_bait int, @exam_dust int
		declare records cursor for
			select sum(volume), sum([count]), sum(exam_trap),sum(exam_bait), sum(exam_dust), volume_unit
			from @view where category = @category
			group by volume_unit
		open records
		fetch next from records into @volume, @count, @exam_trap, @exam_bait, @exam_dust, @volume_unit
		while @@fetch_status = 0
		begin
			set @cnt = @cnt + @count
			set @vlm = @vlm + convert(varchar(10),@volume) + ' ' + @volume_unit + ', '
			set @ex1 = @ex1 + @exam_trap; set @ex2 = @ex2 + @exam_bait; set @ex3 = @ex3 + @exam_dust;
			set @exam = 'flag'
			fetch next from records into @volume, @count, @exam_trap, @exam_bait, @exam_dust, @volume_unit
		end
		close records
		deallocate records

		--добавляем в отчёт
		if @vlm <> ''
			set @vlm = left(@vlm,len(@vlm)-1)
		if @ex1 = 0 and @ex2 = 0 and @ex3 = 0
			set @exam = 'визуально'
		else
			set @exam = 'Ловушки - ' + convert(varchar(10),@ex1) + ' шт, ' +
						'Приманки - ' + convert(varchar(10),@ex2) + ' шт, ' +
						'Смётки - ' + convert(varchar(10),@ex3) + ' шт'
		if @cnt = 0
			set @exam = ''
		insert @result_table
			select @category, 
				   case when @cnt = 0 then null else @cnt end, 
				   @vlm, @exam, 'table10'
		fetch next from categories into @category
	end
	close categories
	deallocate categories

	return
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_32]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_32] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	object_title varchar(100),
	client_name varchar(500),
	exam_method varchar(20),
	karantin varchar(50),
	cnt int,
	style_name varchar(100)
)
AS
BEGIN
	--фильтр на вид report_moscow_32_1 по датам
	declare @view table(
		doc_date datetime,
		object_title varchar(150),
		client_name varchar(500),
		exam_method varchar(20),
		volume decimal(12,2),
		volume_unit varchar(100)
	)
	insert @view
		select * from report_moscow_32_1
		where doc_date >= @date_low and doc_date <= @date_high
		order by object_title, client_name

	--курсор по карантинным объектам
	declare @karantin varchar(150), @count int
	declare karantins cursor for
		select object_title, count(*) as cnt from @view group by object_title
		order by object_title

	open karantins
	fetch next from karantins into @karantin, @count
	while @@FETCH_STATUS = 0
	begin
		--курсор по случаям заражения
		declare @doc_date datetime, @object_title varchar(150), @client_name varchar(500),
				@exam_method varchar(20), @volume decimal(12,2), @volume_unit varchar(100)
		declare items cursor for
			select * from @view where object_title = @karantin
		open items
		fetch next from items into @doc_date, @object_title, @client_name,
				@exam_method, @volume, @volume_unit
		--вставляем первую запись
		insert @result_table
			select @karantin, @client_name, @exam_method, convert(varchar(20),@volume) + ' ' + 
					@volume_unit, @count, 'LTR'
		fetch next from items into @doc_date, @object_title, @client_name,
				@exam_method, @volume, @volume_unit
		while @@FETCH_STATUS = 0
		begin
			insert @result_table
				select '', @client_name, @exam_method, convert(varchar(20),@volume) + ' ' + 
					@volume_unit, null, 'LR'

			fetch next from items into @doc_date, @object_title, @client_name,
				@exam_method, @volume, @volume_unit
		end 
		close items
		deallocate items 

		fetch next from karantins into @karantin, @count
	end
	close karantins
	deallocate karantins 

	insert @result_table 
		select '','','','',null,'T'

	return
END
GO
/****** Object:  UserDefinedFunction [dbo].[report_region_month]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_region_month]
(	
	@date_low datetime, 
	@date_high datetime
)
RETURNS @result_table TABLE 
(
	row_number varchar(5),
	title varchar(200),
	weight_unit varchar(50),
	all_weight decimal(10,2),
	period_weight decimal(10,2),

	shifts varchar(30),
	style_name varchar(10)
)
AS
begin

	declare @year datetime
	set @year = convert(datetime,'01.01.'+str(year(@date_high)))

	declare @table_import_export table
	(
		weight numeric(18,4) NULL,
		weight_unit nvarchar(50) NULL,
		samples_count int NULL,
		doc_date datetime NULL,
		is_russia bit NULL,
		direction varchar(6) NOT NULL

	)
	insert into @table_import_export
	select * from report_month_01_import_export
		where doc_date >= @year and doc_date <= @date_high

	declare @table_karantin table
	(
		doc_date datetime NULL,
		is_russia bit NULL,
		object_title nvarchar(50) NOT NULL,
		in_out int NOT NULL,
		is_forest bit NOT NULL
	)
	insert into @table_karantin
	select * from report_month_01_karantin
		where doc_date >= @year and doc_date <= @date_high

	declare @table_objects table
	(
		doc_date datetime NULL,
		title nvarchar(50) NOT NULL,
		volume numeric(10,2) NOT NULL,
		volume_unit nvarchar(50) NOT NULL,
		exam_trap int NOT NULL,
		exam_bait int NOT NULL,
		client_inn numeric(14,0) NOT NULL,
		client_guid uniqueidentifier NOT NULL,
		group_title nvarchar(50) NOT NULL,
		[count] int NOT NULL
	)
	insert into @table_objects
	select * from report_month_01_objects
		where doc_date >= @year and doc_date <= @date_high

	declare @table_objects1 table
	(
		client_inn numeric(14,0) NOT NULL,
		client_guid uniqueidentifier NOT NULL,
		doc_date datetime NULL,
		kar_group_title nvarchar(100) NOT NULL,
		object_title nvarchar(100) NOT NULL,
		doc_id int NOT NULL,
		volume numeric(10,2) NOT NULL
	)	
	insert into @table_objects1
	select * from report_month_01_objects1
		where doc_date >= @year and doc_date <= @date_high
	

	--������� ���� ��� �������
	declare @unit varchar(50)
	declare unit_import cursor for
		select distinct weight_unit from report_month_01_import_export
		where doc_date >= @date_low and doc_date <= @date_high and not weight_unit is null
	
	--��������� ����� ������ ������ ����
	declare @cnt int
	set @cnt = (
		select count(distinct weight_unit) from report_month_01_import_export
		where doc_date >= @date_low and doc_date <= @date_high and not weight_unit is null
	)
	--���������� ��������� ��� �������� ������� � ��������
	declare @num varchar(5); declare @title varchar(200); declare @rus1 int; declare @rus2 int; declare @direction varchar(10)
	declare import cursor for
		select '1', 'Установление фитосанитарного состояния подкарантинной продукции при ВВОЗЕ в область. Всего:', 1, 0, 'import'
		union all
		select '', 'в том числе: -импортных грузов (вторичный досмотр)', 0, 0, 'import'
		union all
		select '', '-при внутрироссийских перевозках (грузы импортного и российского происхождения)', 1, 1, 'import'
		union all
		select '2', 'Установление фитосанитарного состояния подкарантинной продукции при ВЫВОЗЕ из области. Всего:', 1, 0, 'export'
		union all
		select '', 'в том числе: -при вывозе на экспорт', 0, 0, 'export'
		union all
		select '', '-при вывозе в другие регионы страны', 1, 1, 'export'	

	open import
	fetch next from import into @num, @title, @rus1, @rus2, @direction
	WHILE @@FETCH_STATUS = 0
	BEGIN

		insert @result_table
		select @num, @title, 'образцов', 
			   isnull((
				  select count(*) 
				  from @table_import_export
				  where doc_date >= @year and doc_date <= @date_high 
					and (is_russia = @rus1 or is_russia = @rus2) and direction = @direction
			   ),0),
			   isnull((
				  select count(*)
				  from @table_import_export
				  where doc_date >= @date_low and doc_date <= @date_high
					 and (is_russia = @rus1 or is_russia = @rus2) and direction = @direction
			   ),0),
			   '1:0,'+convert(varchar(10),@cnt)+';0:0,'+convert(varchar(10),@cnt)+';','LTR'

		open unit_import
		fetch next from unit_import into @unit
		WHILE @@FETCH_STATUS = 0
		BEGIN
			insert @result_table
				select '', '', isnull(@unit,'<нет ед>'), 
					   isnull((
						  select sum(weight) 
						  from @table_import_export
						  where weight_unit = @unit and doc_date >= @year and doc_date <= @date_high
							 and (is_russia = @rus1 or is_russia = @rus2) and direction = @direction
						),0),
					   isnull((
							select sum(weight) as s
							from @table_import_export
							where weight_unit = @unit and doc_date >= @date_low and doc_date <= @date_high
								 and (is_russia = @rus1 or is_russia = @rus2) and direction = @direction
						),0),
						'','LR'
			FETCh NEXT FROM unit_import INTO @unit	
		END
		CLOSE unit_import		

		FETCh NEXT FROM import INTO @num, @title, @rus1, @rus2, @direction
	END
	CLOSE import

	deallocate unit_import
	deallocate import

	insert @result_table
		select '3', 'Обнаружено карантинных объектов, всего: ', 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where doc_date >= @date_low and doc_date <= @date_high
			  ),0),'','LTR'
		union all
		select '', 'Из них: -при вторичном досмотре (ввоз)', 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_russia = 0 and doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_russia = 0 and doc_date >= @date_low and doc_date <= @date_high
			  ),0),'','LTR'
		union all
		select '', '-в продукции, поступившей из других регионов (ввоз)', 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_russia = 1 and doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_russia = 1 and doc_date >= @date_low and doc_date <= @date_high
			  ),0),'','LTR'
		union all
		select '', '-в лесоматериалах: при ввозе', 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_forest = 1 and doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 1 and is_forest = 1 and doc_date >= @date_low and doc_date <= @date_high
			  ),0),'','LTR'
		union all
		select '', 'при вывозе', 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 0 and is_forest = 1 and doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where in_out = 0 and is_forest = 1 and doc_date >= @date_low and doc_date <= @date_high
			  ),0),'','LR'
		union all
		select '', 'в том числе по видам:', '', null, null, '', 'LTR'
		union all
		select distinct '', '- ' + object_title, 'случаев',
			  isnull((
			  select count(*) from @table_karantin
			  where object_title = d.object_title and doc_date >= @year and  doc_date <= @date_high
			  ),0),
			  isnull((
			  select count(*) from @table_karantin
			  where object_title = d.object_title and doc_date >= @date_low and doc_date <= @date_high
			  ),0), '', 'LR'
		from @table_karantin as d
		union all
		select '4', 'Установление карантинного фитосанитарного состояния мест
			хранения подкарантинной продукции', '', null, null, '', 'LTR'
		union all
		select distinct '', '- количество предприятий', 'штук',
			  isnull((
			  select count(distinct client_guid) from @table_objects
			  where doc_date >= @year and  doc_date <@date_high
			  ),0),
			  isnull((
			  select count(distinct client_guid) from @table_objects
			  where doc_date >= @date_low and doc_date <@date_high
			  ),0), '', 'LR'
		union all
		select distinct '', '- количество складов', 'штук',
			  isnull((
			  select sum(count) from @table_objects
			  where doc_date >= @year and  doc_date <@date_high
			  ),0),
			  isnull((
			  select sum(count) from @table_objects
			  where doc_date >= @date_low and doc_date <@date_high
			  ),0), '', 'LR'
		union all
		select distinct '', '- объём складов', 'куб.м',
			  isnull((
			  select sum(volume) from @table_objects
			  where doc_date >= @year and  doc_date <@date_high and volume_unit = 'куб.м'
			  ),0),
			  isnull((
			  select sum(volume) from @table_objects
			  where doc_date >= @date_low and doc_date <@date_high and volume_unit = 'куб.м'
			  ),0), '', 'LR'
		union all
		select distinct '', '- количество пищевых приманок', 'штук',
			  isnull((
			  select sum(exam_bait) from @table_objects
			  where doc_date >= @year and  doc_date <@date_high
			  ),0),
			  isnull((
			  select sum(exam_bait) from @table_objects
			  where doc_date >= @date_low and doc_date <@date_high
			  ),0), '', 'LR'
		union all
		select distinct '', '- количество феромонных ловушек', 'штук',
			  isnull((
			  select sum(exam_trap) from @table_objects
			  where doc_date >= @year and  doc_date <@date_high
			  ),0),
			  isnull((
			  select sum(exam_trap) from @table_objects
			  where doc_date >= @date_low and doc_date <@date_high
			  ),0), '', 'LR'
		union all
		select '5', 'Обследовано угодий на выявление карантинных объектов в организациях.
			В том числе:', '', null, null, '', 'LTR'
		union all
		select distinct '', '- количество предприятий', 'штук',
			  isnull((
			  select count(distinct client_guid) from @table_objects1
			  where doc_date >= @year and  doc_date <@date_high
			  ),0),
			  isnull((
			  select count(distinct client_guid) from @table_objects1
			  where doc_date >= @date_low and doc_date <@date_high
			  ),0), '', 'LR'
		union all
		select distinct '', '- карантинные сорняки', 'га',
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%семена карантинных сорных растений%' and doc_date >= @year and  
			  doc_date <@date_high) as d
			  ),0),
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%семена карантинных сорных растений%' and doc_date >= @date_low and  
			  doc_date <@date_high) as d
			  ),0), '', 'LR'
		union all
		select distinct '', '- карантинные болезни', 'га',
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%карантинные болезни%' and doc_date >= @year and  
			  doc_date <@date_high) as d
			  ),0),
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%карантинные болезни%' and doc_date >= @date_low and  
			  doc_date <@date_high) as d
			  ),0), '', 'LR'
		union all
		select distinct '', '- карантинные вредители', 'га',
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%карантинные вредители%' and doc_date >= @year and  
			  doc_date <@date_high) as d
			  ),0),
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where kar_group_title like N'%карантинные вредители%' and doc_date >= @date_low and  
			  doc_date <@date_high) as d
			  ),0), '', 'LR'
		union all
		select distinct '', '- нематода', 'га',
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where object_title like N'%Золотистая картофельная нематода%' and doc_date >= @year and  
			  doc_date <@date_high) as d
			  ),0),
			  isnull((
			  select sum(volume) from (select distinct doc_id, volume from @table_objects1
			  where object_title like N'%Золотистая картофельная нематода%' and doc_date >= @date_low and  
			  doc_date <@date_high) as d
			  ),0), '', 'LR'

	insert @result_table
		select '','','',null,null,'','T'

	return
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_revise_act_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_revise_act_1]
(	
	@date_low datetime, 
	@date_high datetime,
	@client_guid uniqueidentifier,
	@doc_id int
)
RETURNS @result_table TABLE 
(
	paydoc_number nvarchar(100),
	paydoc_date nvarchar(30),
	doc_sum varchar(20),
	doc_number varchar(20),
	doc_date varchar(20),

	shifts varchar(10)
)
AS

begin
	declare @di int
	if @doc_id > 0 
		set @di = @doc_id
	else
		set @di = (SELECT MAX(doc_id) AS doc_id
			FROM ATF_Docs_Agreements() da inner join
				 ATF_R_clients() rc on da.client_guid = rc.client_guid
			WHERE rc.client_guid = @client_guid)
				
	declare @bills table
	(
		paydoc_number nvarchar(100),
		paydoc_date nvarchar(10),
		doc_sum decimal(20,2),
		doc_number varchar(20),
		doc_date varchar(20),
		is_cash bit
	)
	insert @bills
		select paydoc_num, 
				convert(nvarchar, paydoc_date,104) as paydoc_date, 
				doc_sum, 
				db.doc_number, 
				convert(nvarchar, db.doc_date,104) as doc_date,
				is_cash
		from 
			ATF_Docs_Bills() db inner join 
			ATF_Docs_Agreements() da on da.doc_id = db.doc_id
		where db.doc_date >= @date_low and db.doc_date <= @date_high
		and bill_type = 0 and is_transacted = 1
		and db.doc_number > 0 
		and da.doc_id = @di

	insert @result_table
		select 'ПРИХОД наличными','','','','','0:1,0;'

	insert @result_table
		select paydoc_number, paydoc_date, doc_sum, doc_number, doc_date, '' 
		from @bills where is_cash = 1

	insert @result_table
		select 'ПРИХОД безналичными','','','','','0:1,0;'

	insert @result_table
		select paydoc_number, paydoc_date, doc_sum, doc_number, doc_date, '' 
		from @bills where is_cash = 0

	insert @result_table
		select 'Итого ПРИХОД','', sum(doc_sum), '', '', '0:1,0;' from @bills

	return
end
GO
/****** Object:  UserDefinedFunction [dbo].[report_revise_act_2]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_revise_act_2]
(	
	@date_low datetime, 
	@date_high datetime,
	@client_guid uniqueidentifier,
	@doc_id  int
)
RETURNS @result_table TABLE 
(
	paydoc_number nvarchar(100),
	paydoc_date nvarchar(10),
	doc_sum varchar(20),
	doc_number varchar(20),
	doc_date varchar(20),

	shifts varchar(10)
)
AS
begin
	declare @di int
	if @doc_id > 0 
		set @di = @doc_id
	else
		set @di = (SELECT MAX(doc_id) AS doc_id
			FROM ATF_Docs_Agreements() da inner join
				 ATF_R_clients() rc on da.client_guid = rc.client_guid
			WHERE rc.client_guid = @client_guid)

	declare @bills table
	(
		paydoc_number nvarchar(100),
		paydoc_date nvarchar(10),
		doc_sum decimal(20,2),
		doc_number varchar(20),
		doc_date varchar(20),
		is_cash bit,
		bill_type bit
	)
	insert @bills
		select paydoc_num, 
				convert(nvarchar, paydoc_date,104) as paydoc_date, 
				doc_sum, 
				db.doc_number, 
				convert(nvarchar, db.doc_date,104) as doc_date,
				is_cash, bill_type
		from 
			ATF_Docs_Bills() db inner join 
			ATF_Docs_Agreements() da on da.doc_id = db.doc_id
		where db.doc_date >= @date_low and db.doc_date <= @date_high
		and is_transacted = 1 --and bill_type = 1 
		--and Docs_Bills.doc_number > 0 
		and da.doc_id = @di

	insert @result_table
		select paydoc_number, paydoc_date, doc_sum, doc_number, doc_date, '' 
		from @bills where doc_number > 0 and bill_type = 1

	insert @result_table
		select 'Итого РАСХОД','', sum(doc_sum), '', '', '0:1,0;' 
		from @bills where doc_number > 0 and bill_type = 1 

	insert @result_table
		select '','','','','',''

	insert @result_table
		select 'Остаток на счёте','', 
		SUM(doc_sum * CASE bill_type WHEN 0 THEN 1 ELSE - 1 END) as doc_sum,
		'', '', '0:1,0;' from @bills

	return
end
GO
/****** Object:  Table [dbo].[Docs_Bills]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Bills](
	[doc_id] [int] NOT NULL,
	[doc_number] [int] NULL,
	[doc_sum] [numeric](10, 2) NOT NULL,
	[doc_date] [datetime] NULL,
	[tax_nds] [numeric](6, 2) NOT NULL,
	[is_russia] [bit] NOT NULL,
	[is_transacted] [bit] NOT NULL,
	[paydoc_num] [nvarchar](50) NULL,
	[paydoc_date] [datetime] NULL,
	[bill_type] [bit] NOT NULL,
	[line_number] [int] IDENTITY(1,1) NOT NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[is_cash] [bit] NOT NULL,
	[fact_address] [nvarchar](500) NULL,
	[vans] [nvarchar](1000) NULL,
 CONSTRAINT [PK_Docs_Bills] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[bill_type] ASC,
	[line_number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Agreements]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Agreements](
	[doc_id] [int] IDENTITY(1,1) NOT NULL,
	[doc_date] [datetime] NOT NULL,
	[doc_date_limit] [datetime] NOT NULL,
	[doc_number] [int] NULL,
	[subject] [nvarchar](100) NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Docs_Agreements] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_clients]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_clients](
	[client_name] [nvarchar](300) NOT NULL,
	[client_inn] [nvarchar](12) NULL,
	[client_kpp] [nvarchar](9) NULL,
	[client_adress] [nvarchar](500) NULL,
	[client_adress_fact] [nvarchar](500) NULL,
	[client_adress_warehouse] [nvarchar](500) NULL,
	[client_phone] [nchar](20) NULL,
	[client_bank_bik] [nvarchar](9) NULL,
	[client_bank_account] [numeric](20, 0) NULL,
	[client_region] [nvarchar](50) NULL,
	[client_region_rayon] [nvarchar](50) NULL,
	[client_representative] [nvarchar](50) NULL,
	[client_type] [nvarchar](50) NULL,
	[client_face_agreement] [nvarchar](500) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_R_clients] PRIMARY KEY CLUSTERED 
(
	[client_guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[report_debtors_creditors]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_debtors_creditors]
AS
SELECT     CONVERT(varchar, row_number() OVER (ORDER BY sum_all)) AS num, CONVERT(varchar(100), client_inn) AS client_inn, client_name, 
CASE WHEN sum_all < 0 THEN CONVERT(varchar, - sum_all) ELSE '' END AS debet, CASE WHEN sum_all >= 0 THEN CONVERT(varchar, sum_all) 
ELSE '' END AS credit, '' AS style_name
FROM         (SELECT     TOP (100) PERCENT dbo.R_clients.client_inn, dbo.R_clients.client_name, 
                                              SUM(dbo.Docs_Bills.doc_sum * CASE bill_type WHEN 0 THEN 1 ELSE - 1 END) AS sum_all
                       FROM          dbo.R_clients INNER JOIN
                                                  (SELECT     doc_id, client_guid
                                                    FROM          dbo.Docs_Agreements
                                                    WHERE      (dbo.Docs_Agreements.doc_id =
                                                                               (SELECT     MAX(doc_id) AS Expr1
                                                                                 FROM          dbo.Docs_Agreements AS Docs_Agreements_1
                                                                                 WHERE      (Docs_Agreements_1.client_guid = dbo.Docs_Agreements.client_guid)))) AS Agreements ON 
                                              Agreements.client_guid = dbo.R_clients.client_guid LEFT OUTER JOIN
                                              dbo.Docs_Bills ON Agreements.doc_id = dbo.Docs_Bills.doc_id
                       WHERE      (dbo.Docs_Bills.is_transacted = 1)
                       GROUP BY dbo.R_clients.client_inn, dbo.R_clients.client_name
                       ORDER BY sum_all) AS clients
UNION ALL
SELECT DISTINCT 
                      '', '', 'ИТОГО', CONVERT(varchar, sum(sum_all * CASE WHEN sum_all < 0 THEN - 1 ELSE 0 END)), CONVERT(varchar(100), 
                      sum(sum_all * CASE WHEN sum_all >= 0 THEN 1 ELSE 0 END)), 'T' AS style_name
FROM         (SELECT     TOP (100) PERCENT dbo.R_clients.client_inn, dbo.R_clients.client_name, 
                                              SUM(dbo.Docs_Bills.doc_sum * CASE bill_type WHEN 0 THEN 1 ELSE - 1 END) AS sum_all
                       FROM          dbo.R_clients INNER JOIN
                                                  (SELECT     doc_id, client_guid
                                                    FROM          dbo.Docs_Agreements
                                                    WHERE      (dbo.Docs_Agreements.doc_id =
                                                                               (SELECT     MAX(doc_id) AS Expr1
                                                                                 FROM          dbo.Docs_Agreements AS Docs_Agreements_1
                                                                                 WHERE      (Docs_Agreements_1.client_guid = dbo.Docs_Agreements.client_guid)))) AS Agreements ON 
                                              Agreements.client_guid = dbo.R_clients.client_guid LEFT OUTER JOIN
                                              dbo.Docs_Bills ON Agreements.doc_id = dbo.Docs_Bills.doc_id
                       WHERE      (dbo.Docs_Bills.is_transacted = 1)
                       GROUP BY dbo.R_clients.client_inn, dbo.R_clients.client_name
                       ORDER BY sum_all) AS clients
GO
/****** Object:  View [dbo].[Docs_COO]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[Docs_COO]
AS
SELECT     doc_id, title, object_title
FROM         ATF_Docs_COO_Karantin()
UNION ALL
SELECT     doc_id, title, object_title
FROM         ATF_Docs_COO_NotKarantin()
GO
/****** Object:  View [dbo].[report_examinations_01]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_examinations_01]
AS
SELECT 
dcoo.doc_id, dco.doc_date, rc.client_name, ro.group_title, 
dcoo.title, dcoo.[count], dcoo.volume, dcoo.volume_unit, 
dcoo.rayon, dcoo.exam_trap, dcoo.exam_bait, dcoo.exam_dust, 
isnull
((SELECT object_title + ';' AS 'data()'
  FROM Docs_COO t
  WHERE dcoo.doc_id = t.doc_id AND dcoo.title = t.title FOR xml path('')), 'не обнаружено') AS pests, 
isnull
((SELECT object_title + ';' AS 'data()'
  FROM ATF_Docs_COO_Examinations() t
  WHERE dcoo.doc_id = t.doc_id AND dcoo.title = t.title FOR xml path('')), '') AS exams
FROM         
ATF_Docs_Conclusions_Objects() dco INNER JOIN
ATF_Docs_CO_Objects() dcoo ON dco.doc_id = dcoo.doc_id INNER JOIN
ATF_R_clients() rc ON dco.client_guid = rc.client_guid INNER JOIN
ATF_R_objects() ro ON dcoo.title = ro.object_title LEFT OUTER JOIN
ATF_Docs_COO_Examinations() dcooe ON dcoo.doc_id = dcooe.doc_id AND dcoo.title = dcooe.title LEFT OUTER JOIN
Docs_COO dcoo1 ON dcoo.doc_id = dcoo1.doc_id AND dcoo.title = dcoo1.title
GROUP BY 
dcoo.doc_id, dco.doc_date, dcoo.title, rc.client_name, ro.group_title, dcoo.[count], 
dcoo.volume, dcoo.volume_unit, dcoo.rayon, dcoo.exam_trap, dcoo.exam_bait, dcoo.exam_dust
GO
/****** Object:  View [dbo].[report_sales_book_aggregate]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_sales_book_aggregate]
AS
SELECT     
db.doc_date, SUM(db.doc_sum) AS doc_sum, SUM(CONVERT(decimal(10, 2), 
ROUND(db.doc_sum / (1 + db.tax_nds * 0.01), 2))) AS doc_sum_without_nds, SUM(CONVERT(decimal(10, 2), 
db.doc_sum - ROUND(db.doc_sum / (1 + db.tax_nds * 0.01), 2))) AS doc_sum_nds
FROM         
ATF_Docs_Bills() db INNER JOIN
ATF_Docs_Agreements() da ON db.doc_id = da.doc_id INNER JOIN
ATF_R_clients() rc ON da.client_guid = rc.client_guid
WHERE db.bill_type = 1 AND db.is_transacted = 1
GROUP BY db.doc_date
GO
/****** Object:  UserDefinedFunction [dbo].[report_sales_book_total]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_sales_book_total]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
select top(1000000)
	CONVERT(VARCHAR(12), doc_date, 104) as doc_date,
	'' as a, '' as b, '' as c, '' as d,
	doc_sum,
	doc_sum_without_nds,
	doc_sum_nds,
	'' as e,'' as f,'' as g,'' as h,'' as k,'' as l, 'table8' as style_name
from report_sales_book_aggregate
where	 
	doc_date >= @date_low and
	doc_date <= @date_high
order by report_sales_book_aggregate.doc_date

union all

select
	'' as a, '' as b, '' as c, '' as d,
	'Всего' as paydoc_date,
	(
select sum(doc_sum)
from report_sales_book_aggregate
where doc_date >= @date_low and doc_date <= @date_high
	) as doc_sum,
	(
select sum(doc_sum_without_nds)
from report_sales_book_aggregate
where doc_date >= @date_low and doc_date <= @date_high
	)  as doc_sum_without_nds,
	(
select sum(doc_sum_nds)
from report_sales_book_aggregate
where doc_date >= @date_low and doc_date <= @date_high
	) as doc_sum_nds,
	'' as e,'' as f,'' as g,'' as h,'' as k,'' as l, 'table8' as style_name
)
GO
/****** Object:  View [dbo].[report_moscow_21_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_21_1]
AS
SELECT     
dce.doc_id, dce.doc_date, rc.is_russia, SUM(ISNULL(dag.samples_count, 0)) AS cnt
FROM         
ATF_Docs_Acts_Goods() dag INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_Docs_Conclusions_Examination() dce ON dag.doc_id = dce.doc_id
GROUP BY dce.doc_id, dce.doc_date, rc.is_russia
GO
/****** Object:  View [dbo].[report_moscow_21_2]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_21_2]
AS
SELECT     
Docs_Conclusions.doc_id, Docs_Conclusions.doc_date, rc.is_russia
FROM         
(SELECT doc_id, doc_date
 FROM ATF_Docs_Conclusions_Import() dci
 UNION ALL
 SELECT doc_id, doc_date
 FROM ATF_Docs_Conclusions_Export() dce) AS Docs_Conclusions INNER JOIN
ATF_Docs_Acts_Goods() dag ON Docs_Conclusions.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title
GROUP BY Docs_Conclusions.doc_id, Docs_Conclusions.doc_date, rc.is_russia
GO
/****** Object:  View [dbo].[report_moscow_21_3]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_21_3]
AS
SELECT is_russia, doc_sum, doc_date
FROM ATF_Docs_Bills() db
WHERE (bill_type = 0) AND (is_transacted = 1)
GO
/****** Object:  View [dbo].[report_moscow_21_4]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_21_4]
AS
SELECT     
dce.doc_id, dce.doc_date, rc.is_russia
FROM         
ATF_Docs_Acts_Goods() dag INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_Docs_Conclusions_Examination() dce ON dag.doc_id = dce.doc_id
GROUP BY dce.doc_id, dce.doc_date, rc.is_russia
GO
/****** Object:  UserDefinedFunction [dbo].[report_moscow_21]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_moscow_21]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
	select 
	'Отечественная' as is_russia,
	(select sum(cnt) from report_moscow_21_1 where is_russia = 1
	and doc_date >= @date_low and doc_date <= @date_high) as samples_count,
	(select count(*) from report_moscow_21_4 where is_russia = 1
	and doc_date >= @date_low and doc_date <= @date_high) as exp_count,
	(select count(*) from report_moscow_21_2 where is_russia = 1
	and doc_date >= @date_low and doc_date <= @date_high) as concl_count,
	(select sum(doc_sum) from report_moscow_21_3 where is_russia = 1
	and doc_date >= @date_low and doc_date <= @date_high) as money_count,
	'table10' as style_name

	union all

	select 
	'Импортная' as is_russia,
	(select sum(cnt) from report_moscow_21_1 where is_russia = 0
	and doc_date >= @date_low and doc_date <= @date_high) as samples_count,
	(select count(*) from report_moscow_21_4 where is_russia = 0
	and doc_date >= @date_low and doc_date <= @date_high) as exp_count,
	(select count(*) from report_moscow_21_2 where is_russia = 0
	and doc_date >= @date_low and doc_date <= @date_high) as concl_count,
	(select sum(doc_sum) from report_moscow_21_3 where is_russia = 0
	and doc_date >= @date_low and doc_date <= @date_high) as money_count,
	'table10' as style_name

	union all

	select 
	'Итого' as is_russia,
	(select sum(cnt) from report_moscow_21_1
	where doc_date >= @date_low and doc_date <= @date_high) as samples_count,
	(select count(distinct doc_id) from report_moscow_21_4
	where doc_date >= @date_low and doc_date <= @date_high) as exp_count,
	(select count(distinct doc_id) from report_moscow_21_2
	where doc_date >= @date_low and doc_date <= @date_high) as concl_count,
	(select sum(doc_sum) from report_moscow_21_3
	where doc_date >= @date_low and doc_date <= @date_high) as money_count,
	'table10' as style_name
)
GO
/****** Object:  View [dbo].[report_agreements]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_agreements]
AS
SELECT     TOP (100) PERCENT 
da.doc_date, da.doc_number, rc.client_name
FROM         
ATF_Docs_Agreements() da INNER JOIN
ATF_R_clients() rc ON da.client_guid = rc.client_guid
ORDER BY rc.client_name
GO
/****** Object:  UserDefinedFunction [dbo].[report_agreements_01]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_agreements_01] 
(	
	@date_low datetime, 
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT 
	convert(varchar,ROW_NUMBER() OVER (ORDER BY doc_date, doc_number ASC)) AS row_num, 
	convert(varchar,doc_date,104) as doc_date,
	convert(varchar,doc_number) as doc_number, 
	client_name, 
	'LTR' as style_name
	from report_agreements
	where doc_date >= @date_low and doc_date <= @date_high

union all

	select '','','','','T'
  
)
GO
/****** Object:  Table [dbo].[R_inspection]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_inspection](
	[region_number] [nvarchar](2) NOT NULL,
	[director_div_karantin] [nvarchar](150) NULL,
	[director] [nvarchar](150) NULL,
	[accountant] [nvarchar](150) NULL,
	[title] [nvarchar](500) NULL,
	[title_short] [nvarchar](200) NULL,
	[adress] [nvarchar](500) NULL,
	[telephone] [nvarchar](500) NULL,
	[fax] [nvarchar](50) NULL,
	[addressee] [nvarchar](500) NULL,
	[bank_title] [nvarchar](200) NULL,
	[bank_caccount] [nvarchar](30) NULL,
	[bank_saccount] [nvarchar](30) NULL,
	[bank_bik] [nvarchar](12) NULL,
	[bank_city] [nvarchar](100) NULL,
	[payment_target] [nvarchar](500) NULL,
	[agreement_note] [nvarchar](max) NULL,
	[inn] [nchar](12) NULL,
	[kpp] [numeric](9, 0) NULL,
	[payment_adressee] [nvarchar](500) NULL,
	[kbk] [nvarchar](20) NULL,
	[okato] [nvarchar](11) NULL,
	[delegation_order] [nvarchar](500) NULL,
	[agreement] [nvarchar](50) NULL,
	[bank_kbk] [nvarchar](30) NULL,
	[payment_type] [nvarchar](30) NULL,
	[ogrn] [nvarchar](30) NULL,
	[oktmo] [nvarchar](30) NULL,
	[email] [nvarchar](50) NULL,
 CONSTRAINT [PK_R_inspection] PRIMARY KEY CLUSTERED 
(
	[region_number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[report_sales_book_all]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_sales_book_all]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
select top(100000)
CONVERT(VARCHAR(12), db.doc_date, 104)+' '+ (select top(1) region_number from R_inspection)+'/'+ru.user_division+'/'+rtrim(ltrim(str(db.doc_number))) as dt,
rc.client_name,
CONVERT(VARCHAR(15), rc.client_inn) as client_inn,isnull(convert(varchar(15),rc.client_kpp),'') as client_kpp,
CONVERT(VARCHAR(12), db.paydoc_date, 104) as paydoc_date,
db.doc_sum,
case when db.tax_nds = 18.00 then convert(decimal(10,2),round(db.doc_sum / (1 + db.tax_nds*0.01),2)) else 0 end as doc_sum_without_nds,
case when db.tax_nds = 18.00 then convert(decimal(10,2),db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2)) else 0 end as doc_sum_nds,
'' as z,
'' as x,
'' as c,
case when db.tax_nds = 20.00 then convert(decimal(10,2),round(db.doc_sum / (1 + db.tax_nds*0.01),2)) else 0 end as doc_sum_without_nds2,
case when db.tax_nds = 20.00 then convert(decimal(10,2),db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2)) else 0 end as doc_sum_nds2,
'' as n, 
'table8' as style_name
from 
ATF_docs_bills() db inner join 
ATF_docs_agreements() da on db.doc_id = da.doc_id inner join 
ATF_R_clients() rc on da.client_guid = rc.client_guid inner join 
ATF_R_users() ru on db.doc_user = ru.[user_name]
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high
order by db.doc_date, db.doc_number

union all

select
	'' as dt,
	'' as client_name,
	'' as client_inn,
	'' as client_kpp,
	'ИТОГО' as paydoc_date,
	(
select sum(db.doc_sum)
from ATF_docs_bills() db
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high
	) as doc_sum,
	(
select convert(decimal(10,2),sum(round(db.doc_sum / (1 + db.tax_nds*0.01),2)))
from ATF_docs_bills() db
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high and
	  db.tax_nds = 18.00
	)  as doc_sum_without_nds,
	(
select convert(decimal(10,2),sum(db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2)))
from ATF_docs_bills() db
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high and
	  db.tax_nds = 18.00
	) as doc_sum_nds,
	'' as z,
	'' as x,
	'' as c,
	(
select convert(decimal(10,2),sum(round(db.doc_sum / (1 + db.tax_nds*0.01),2)))
from ATF_docs_bills() db
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high and
	  db.tax_nds = 20.00
	)  as doc_sum_without_nds,
	(
select convert(decimal(10,2),sum(db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2)))
from ATF_docs_bills() db
where db.bill_type = 1 and db.is_transacted = 1 and
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high and
	  db.tax_nds = 20.00
	) as doc_sum_nds,
	'' as n,
	'table8' as style_name
)
GO
/****** Object:  Table [dbo].[Docs_Bills_Services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Bills_Services](
	[doc_id] [int] NOT NULL,
	[bill_type] [bit] NOT NULL,
	[doc_line_number] [int] NOT NULL,
	[service_title] [nvarchar](300) NOT NULL,
	[line_number] [int] IDENTITY(1,1) NOT NULL,
	[rate] [numeric](10, 2) NOT NULL,
	[unit] [nvarchar](100) NULL,
	[count] [numeric](10, 2) NOT NULL,
	[sum_factor] [decimal](3, 2) NOT NULL,
	[sum_factor_title] [nvarchar](300) NULL,
	[sum]  AS (CONVERT([numeric](25,2),([rate]*[count])*[sum_factor],0)) PERSISTED,
 CONSTRAINT [PK_Docs_Bills_Services] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[bill_type] ASC,
	[doc_line_number] ASC,
	[service_title] ASC,
	[line_number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[report_services_sums]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_services_sums]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
	select top 10000 
		(row_number() over (order by service_title)) as rownum,
		service_title, 
		sum([sum]) as ggg
	from Docs_Bills_Services inner join 
		 Docs_Bills on Docs_Bills.doc_id = Docs_Bills_Services.doc_id and
				       Docs_Bills.bill_type = Docs_Bills_Services.bill_type and
					   Docs_Bills.line_number = Docs_Bills_Services.doc_line_number
	where 
		Docs_Bills.doc_date <= @date_high and 
		Docs_Bills.doc_date >= @date_low and
		Docs_Bills.bill_type = 1 and
		Docs_Bills.is_transacted = 1
	group by service_title
	order by service_title
)
GO
/****** Object:  Table [dbo].[Docs_Conclusions_Examination]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_Examination](
	[doc_id] [int] IDENTITY(3000000,1) NOT NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[doc_number] [int] NULL,
	[doc_date] [datetime] NULL,
	[transport_type] [nvarchar](100) NULL,
	[transport_number] [nvarchar](50) NULL,
	[bill_type] [nvarchar](100) NULL,
	[bill_number] [nvarchar](150) NULL,
	[bill_date] [nvarchar](20) NULL,
	[sert_number] [nvarchar](50) NULL,
	[sert_from] [nvarchar](200) NULL,
	[target_or_source] [nvarchar](1000) NULL,
	[fact_address] [nvarchar](500) NULL,
	[karantin_sert_number] [nvarchar](50) NULL,
	[karantin_sert_date] [nvarchar](50) NULL,
	[to_document] [nvarchar](500) NULL,
	[material_from] [nvarchar](500) NULL,
	[mark] [nvarchar](500) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
	[target_or_source_dir] [nvarchar](100) NULL,
 CONSTRAINT [PK_Docs_Conclusions_Examination] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[report_form_21]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[report_form_21]
AS
SELECT
dag.weight, dag.production_country, rc.is_russia, 
dag.doc_id, dc.doc_date, rgg.group_title, rgg.category_title, dc.target_or_source_dir, dag.samples_count
FROM
Docs_Conclusions_Examination dc INNER JOIN
ATF_Docs_Acts_Goods() dag ON dc.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title INNER JOIN
ATF_R_goods_groups() rgg ON rg.group_title = rgg.group_title
GO
/****** Object:  UserDefinedFunction [dbo].[report_debtors_creditors_f]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_debtors_creditors_f] 
(
	@date_low datetime, 
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(

SELECT
CONVERT(varchar, row_number() OVER (ORDER BY sum_all)) AS num, 
CONVERT(varchar(100), client_inn) AS client_inn, 
client_name, 
CASE WHEN sum_all < 0 THEN CONVERT(varchar, - sum_all) ELSE '' END AS debet, 
CASE WHEN sum_all >= 0 THEN CONVERT(varchar, sum_all) ELSE '' END AS credit, 
'' AS style_name
FROM
(
SELECT TOP (100) PERCENT
rc.client_inn, 
rc.client_name, 
SUM(db.doc_sum * CASE bill_type WHEN 0 THEN 1 ELSE - 1 END) AS sum_all
FROM 
ATF_R_clients() rc

INNER JOIN

(SELECT doc_id, client_guid 
FROM ATF_Docs_Agreements() da
WHERE      
(da.doc_id = (
SELECT MAX(doc_id) AS Expr1 
FROM ATF_Docs_Agreements() da1 
WHERE      
(da1.client_guid = da.client_guid)))) 
AS Agreements ON Agreements.client_guid = rc.client_guid 

LEFT OUTER JOIN

ATF_Docs_Bills() db ON Agreements.doc_id = db.doc_id
                       WHERE      (db.is_transacted = 1 and db.doc_date >= @date_low and db.doc_date <= @date_high)
                       GROUP BY rc.client_inn, rc.client_name
                       ORDER BY sum_all) AS clients
                       
UNION ALL

SELECT DISTINCT 
'', '', '�����', 
CONVERT(varchar, sum(sum_all * CASE WHEN sum_all < 0 THEN - 1 ELSE 0 END)), 
CONVERT(varchar(100), sum(sum_all * CASE WHEN sum_all >= 0 THEN 1 ELSE 0 END)), 
'T' AS style_name

FROM 

(SELECT TOP (100) PERCENT 

rc.client_inn, 
rc.client_name, 
SUM(db.doc_sum * CASE bill_type WHEN 0 THEN 1 ELSE - 1 END) AS sum_all

FROM          
ATF_R_clients() rc

INNER JOIN

(SELECT     
doc_id, client_guid
FROM          
ATF_Docs_Agreements() da
WHERE      
(da.doc_id =
(SELECT     MAX(doc_id) AS Expr1
FROM ATF_Docs_Agreements() da1
WHERE      (da1.client_guid = da.client_guid)))) 
AS Agreements ON 
Agreements.client_guid = rc.client_guid 

LEFT OUTER JOIN

ATF_Docs_Bills() db ON Agreements.doc_id = db.doc_id
                       WHERE      (db.is_transacted = 1 and db.doc_date >= @date_low and db.doc_date <= @date_high)
                       GROUP BY rc.client_inn, rc.client_name
                       ORDER BY sum_all) AS clients

)
GO
/****** Object:  UserDefinedFunction [dbo].[report_fin_01]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_fin_01]
(	
@date_low datetime,
@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
select 
ROW_NUMBER() OVER(ORDER BY db.doc_date asc, db.doc_sum asc) AS 'Row Number',
CONVERT(VARCHAR(12), db.doc_date, 104) + ' ' + (select top(1) region_number from ATF_R_inspection()) +
'/' + ru.user_division+'/'+rtrim(ltrim(str(db.doc_number))) as dt,
db.doc_sum, rc.client_name,
'Пл.поручение № '+db.paydoc_num+' от '+CONVERT(VARCHAR(12), db.paydoc_date, 104) as pd
from 
ATF_docs_bills() db	inner join 
ATF_docs_agreements() da on db.doc_id = da.doc_id inner join 
ATF_R_clients() rc on da.client_guid = rc.client_guid	inner join 
ATF_R_users() ru on db.doc_user = ru.[user_name]
where 
db.bill_type = 1 and
db.doc_date >= @date_low and
db.doc_date <= @date_high
)
GO
/****** Object:  UserDefinedFunction [dbo].[report_journal1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_journal1]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(

select top 100000 
ROW_NUMBER() OVER(ORDER BY datepart(YEAR, doc_date), doc_number) AS n,
d, client_name, good_title, arrived, sender
from 
(
	select 
	doc_number, doc_date, 
	convert(varchar, doc_number) + '/' + convert(varchar(10), doc_date, 104) as d, client_name, dbo.Concatenate(' ' + good_title) as good_title, arrived, sender
	from 
	ATF_Docs_Conclusions_Import() inner join
	ATF_R_clients() on ATF_Docs_Conclusions_Import.client_guid = ATF_R_clients.client_guid inner join
	ATF_Docs_Acts_Goods() on ATF_Docs_Conclusions_Import.doc_id = ATF_Docs_Acts_Goods.doc_id
	group by doc_number, doc_date, client_name, arrived, sender

	union all
	
	select 
	doc_number, doc_date,
	convert(varchar, doc_number) + '/' + convert(varchar(10), doc_date, 104) as d, client_name, dbo.Concatenate(' ' + good_title) as good_title, origin_text as arrived, addressee as sender
	from 
	ATF_Docs_Conclusions_Export() inner join
	ATF_R_clients() on ATF_Docs_Conclusions_Export.client_guid = ATF_R_clients.client_guid inner join
	ATF_Docs_Acts_Goods() on ATF_Docs_Conclusions_Export.doc_id = ATF_Docs_Acts_Goods.doc_id
	group by doc_number, doc_date, client_name, origin_text, addressee
) as g
order by datepart(YEAR, doc_date), doc_number

)
GO
/****** Object:  UserDefinedFunction [dbo].[report_list_bills]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_list_bills]
(	
	@date_low datetime,
	@date_high datetime,
	@bill_type bit
)
RETURNS TABLE 
AS
RETURN 
(
select top(1000000)
	CONVERT(VARCHAR(5), (row_number() over (order by CONVERT(VARCHAR(12), db.doc_date, 104) asc))) as rownum,
	CONVERT(VARCHAR(12), db.doc_date, 104) as doc_date,
	CONVERT(VARCHAR(5), db.doc_number) as doc_number,
	CONVERT(VARCHAR(15), rc.client_inn) as client_inn,
	rc.client_name,
	convert(decimal(10,2),round(db.doc_sum / (1 + db.tax_nds*0.01),2)) as doc_sum_without_nds,
	convert(decimal(10,2),db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2)) as doc_sum_nds,
	db.doc_sum,
	'table10' as style_name
from 
ATF_docs_bills() db	inner join 
ATF_docs_agreements() da on db.doc_id = da.doc_id inner join 
ATF_R_clients() rc on da.client_guid = rc.client_guid
where 
db.bill_type = @bill_type and 
db.is_transacted = 1 and 
db.doc_number > 0 and 
db.doc_date >= @date_low and
db.doc_date <= @date_high
order by db.doc_date, db.doc_number

union all

select
	'' as rownum,'' as doc_date,'' as doc_number,'' as client_inn, 'Итого:' as client_name,
	(
	select sum(convert(decimal(10,2),round(db.doc_sum / (1 + db.tax_nds*0.01),2))) from ATF_docs_bills() db where  
	bill_type = @bill_type and is_transacted = 1 and db.doc_number > 0 and 
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high
	) as doc_sum_without_nds,
	(
	select sum(convert(decimal(10,2),db.doc_sum - round(db.doc_sum / (1 + db.tax_nds*0.01),2))) from ATF_docs_bills() db where  
	bill_type = @bill_type and is_transacted = 1 and db.doc_number > 0 and 
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high
	) as doc_sum_nds,
	(
	select sum(doc_sum) from ATF_docs_bills() db where  
	bill_type = @bill_type and is_transacted = 1 and db.doc_number > 0 and 
	  db.doc_date >= @date_low and
	  db.doc_date <= @date_high
	) as doc_sum,
	'table10' as style_name
)
GO
/****** Object:  UserDefinedFunction [dbo].[report_list_paydocs]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[report_list_paydocs]
(	
	@date_low datetime,
	@date_high datetime
)
RETURNS TABLE 
AS
RETURN 
(
select top(1000000)
	CONVERT(VARCHAR(5), (row_number() over (order by CONVERT(VARCHAR(12), db.paydoc_date, 104) asc))) as rownum,
	CONVERT(VARCHAR(12), db.paydoc_date, 104) as paydoc_date,
	db.paydoc_num,
	CONVERT(VARCHAR(15), rc.client_inn) as client_inn,
	rc.client_name,
	CONVERT(VARCHAR(15),db.doc_sum) as doc_sum,
	CONVERT(VARCHAR(12), db.doc_date, 104) as doc_date,
	CONVERT(VARCHAR(5), db.doc_number) as doc_number,
	'table10' as style_name
from 
ATF_docs_bills() db inner join 
ATF_docs_agreements() da on db.doc_id = da.doc_id inner join 
ATF_R_clients() rc on da.client_guid = rc.client_guid
where 
db.bill_type = 0 and db.is_transacted = 1 and db.doc_number > 0 and 
db.doc_date >= @date_low and db.doc_date <= @date_high
order by db.paydoc_date

union all

select
	'' as rownum,'' as paydoc_date,'' as paydoc_num,'' as client_inn, 'Итого:' as client_name,
	(
	select sum(doc_sum) from ATF_docs_bills() db where  
	bill_type = 0 and is_transacted = 1 and db.doc_number > 0 and 
	  db.doc_date >= @date_low and db.doc_date <= @date_high
	) as doc_sum,
	'' as doc_date,'' as doc_number, 'table10' as style_name
)
GO
/****** Object:  View [dbo].[H_ATF_Columns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[H_ATF_Columns]
AS
SELECT
t.name, 
'[' + c.name + '] ' + 
'[' + tp.name + ']' + 
(CASE tp.name 
	WHEN 'nvarchar' THEN 
	'(' + 
	(CASE c.max_length 
		WHEN - 1 THEN 'max' 
		ELSE CONVERT(nvarchar,c.max_length / 2) 
	END) + 
	')' 
	WHEN 'nchar' THEN '(' + CONVERT(nvarchar, c.max_length / 2) + ')' 
	WHEN 'bit' THEN '' 
	WHEN 'int' THEN '' 
	WHEN 'datetime' THEN '' 
	WHEN 'uniqueidentifier' THEN ''
	ELSE '(' + CONVERT(nvarchar, c.precision) + ',' + CONVERT(nvarchar, c.scale) + ')' 
END) + 
(CASE c.is_nullable 
	WHEN 0 THEN ' NOT NULL' 
	ELSE ' NULL' 
END) 
AS string,
'[' + c.name + '] ' + 
'[' + tp.name + ']' + 
(CASE tp.name 
	WHEN 'nvarchar' THEN 
	'(' + 
	(CASE c.max_length 
		WHEN - 1 THEN 'max' 
		ELSE CONVERT(nvarchar,c.max_length / 2) 
	END) + 
	')' 
	WHEN 'nchar' THEN '(' + CONVERT(nvarchar, c.max_length / 2) + ')' 
	WHEN 'bit' THEN '' 
	WHEN 'int' THEN '' 
	WHEN 'datetime' THEN '' 
	WHEN 'uniqueidentifier' THEN ''
	ELSE '(' + CONVERT(nvarchar, c.precision) + ',' + CONVERT(nvarchar, c.scale) + ')' 
END) 
AS string_without_nulls, 
'[' + c.name + '] ' AS name_column,
isnull((select 1
from 
INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc inner join
INFORMATION_SCHEMA.KEY_COLUMN_USAGE kc on tc.CONSTRAINT_NAME = kc.CONSTRAINT_NAME
where CONSTRAINT_TYPE = 'PRIMARY KEY' and tc.TABLE_NAME = t.name and kc.COLUMN_NAME = c.name
),0) as is_primary_key
FROM
	sys.tables AS t INNER JOIN
	sys.columns AS c ON t.object_id = c.object_id INNER JOIN
	sys.types AS tp ON c.system_type_id = tp.system_type_id
WHERE     
	(t.name LIKE 'R%' OR t.name LIKE 'Doc%') AND 
	(tp.name <> 'sysname')
GO
/****** Object:  View [dbo].[report_karantin_objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_karantin_objects]
AS
SELECT
dck.object_title, dag.good_title, dag.production_country, dag.weight, dag.weight_unit, 
dck.[count], dck.count_unit, ggg.importer, ggg.exporter, ggg.doc_date, rct.is_russia
FROM         
ATF_Docs_Acts_Goods() dag INNER JOIN
ATF_Docs_Conclusions_Karantin() dck ON dag.doc_id = dck.doc_id AND 
									   dag.good_title = dck.good_title AND 
									   dag.production_country = dck.production_country INNER JOIN
ATF_R_countries() rct ON dag.production_country = rct.country_title  INNER JOIN
(
SELECT
dci.doc_id, dci.doc_date, rc.client_name AS importer, dci.sender AS exporter
FROM
ATF_Docs_Conclusions_Import() dci INNER JOIN
ATF_R_clients() rc ON dci.client_guid = rc.client_guid
UNION ALL
SELECT     
dce.doc_id, dce.doc_date, dce.addressee AS importer, rc.client_name AS exporter
FROM         
ATF_Docs_Conclusions_Export() dce INNER JOIN
ATF_R_clients() rc ON dce.client_guid = rc.client_guid
) AS ggg ON ggg.doc_id = dag.doc_id
GO
/****** Object:  View [dbo].[report_month_01_import_export]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_month_01_import_export]
AS
SELECT     
dag.weight, rwu.mnemonic AS weight_unit, dag.samples_count, dce.doc_date, rc.is_russia, 'export' AS direction
FROM         
ATF_Docs_Conclusions_Export() dce INNER JOIN
ATF_Docs_Acts_Goods() dag ON dce.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dce.sending_to = rc.country_title INNER JOIN
ATF_R_weight_units() rwu ON rwu.unit_title = dag.weight_unit
UNION ALL
SELECT     
dag.weight, rwu.mnemonic, dag.samples_count, dci.doc_date, rc.is_russia, 'import' AS direction
FROM         
ATF_Docs_Conclusions_Import() dci INNER JOIN
ATF_Docs_Acts_Goods() dag ON dci.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dci.arrived = rc.country_title INNER JOIN
ATF_R_weight_units() rwu ON rwu.unit_title = dag.weight_unit
GO
/****** Object:  View [dbo].[report_month_01_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_month_01_karantin]
AS
SELECT dci.doc_date, rc.is_russia, dck.object_title, 1 AS in_out, rgg.is_forest
FROM         
ATF_Docs_Conclusions_Import() dci INNER JOIN
ATF_Docs_Acts_Goods() dag ON dci.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dci.arrived = rc.country_title INNER JOIN
ATF_Docs_Conclusions_Karantin() dck ON dag.doc_id = dck.doc_id AND 
dag.good_title = dck.good_title AND 
dag.production_country = dck.production_country INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title INNER JOIN
ATF_R_goods_groups() rgg ON rg.group_title = rgg.group_title
UNION ALL
SELECT dce.doc_date, rc.is_russia, dck.object_title, 0 AS in_out, rgg.is_forest
FROM         
ATF_Docs_Acts_Goods() dag INNER JOIN
ATF_Docs_Conclusions_Karantin() dck ON dag.doc_id = dck.doc_id AND 
dag.good_title = dck.good_title AND dag.production_country = dck.production_country INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title INNER JOIN
ATF_R_goods_groups() rgg ON rg.group_title = rgg.group_title INNER JOIN
ATF_Docs_Conclusions_Export() dce ON dag.doc_id = dce.doc_id INNER JOIN
ATF_R_countries() rc ON dce.sending_to = rc.country_title
GO
/****** Object:  View [dbo].[report_month_01_objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_month_01_objects]
AS
SELECT     
dco.doc_date, dcoo.title, dcoo.volume, dcoo.volume_unit, dcoo.exam_trap, dcoo.exam_bait, 
rc.client_inn, rc.client_guid, ro.group_title, dcoo.[count]
FROM         
ATF_Docs_Conclusions_Objects() dco INNER JOIN
ATF_Docs_CO_Objects() dcoo ON dco.doc_id = dcoo.doc_id INNER JOIN
ATF_R_objects() ro ON dcoo.title = ro.object_title AND ro.group_title IN (N'склады временного хранения', 
N'склады предприятий') INNER JOIN
ATF_R_clients() rc ON dco.client_guid = rc.client_guid
GO
/****** Object:  View [dbo].[report_month_01_objects1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_month_01_objects1]
AS
SELECT     
rc.client_inn, rc.client_guid, dco.doc_date, rk.group_title AS kar_group_title, 
rk.object_title, dco.doc_id, dcooe.volume
FROM         
ATF_Docs_Conclusions_Objects() dco INNER JOIN
ATF_Docs_CO_Objects() dcoo ON dco.doc_id = dcoo.doc_id INNER JOIN
ATF_Docs_COO_Examinations() dcooe ON dcoo.doc_id = dcooe.doc_id AND dcoo.title = dcooe.title INNER JOIN
ATF_R_karantin() rk ON dcooe.object_title = rk.object_title INNER JOIN
ATF_R_objects() ro ON dcoo.title = ro.object_title INNER JOIN
ATF_R_clients() rc ON dco.client_guid = rc.client_guid
WHERE
dcoo.volume_unit = N'га'
GO
/****** Object:  View [dbo].[report_moscow_11_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_11_1]
AS
SELECT
rwu.mnemonic AS weight_unit, dag.weight, dag.production_country, rc.is_russia, 
dag.doc_id, dc.doc_date, rgg.group_title, rgg.category_title, dc.country, dc.is_import,
dag.samples_count
FROM
(
SELECT doc_id, doc_date, arrived as country, 1 as is_import
FROM  ATF_Docs_Conclusions_Import()
UNION ALL
SELECT doc_id, doc_date, sending_to as country, 0 as is_import
FROM ATF_Docs_Conclusions_Export()
) AS dc INNER JOIN
ATF_Docs_Acts_Goods() dag ON dc.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title INNER JOIN
ATF_R_goods_groups() rgg ON rg.group_title = rgg.group_title INNER JOIN
ATF_R_weight_units() rwu ON dag.weight_unit = rwu.unit_title
GO
/****** Object:  View [dbo].[report_moscow_22_count]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_22_count]
AS
SELECT TOP (1000000) 
rge.examination_title, rc.is_russia, Docs_Conclusions.doc_date
FROM         
(SELECT doc_id, doc_date FROM ATF_Docs_Conclusions_Examination() dce) AS Docs_Conclusions INNER JOIN
ATF_Docs_Acts_Goods() dag ON Docs_Conclusions.doc_id = dag.doc_id INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title INNER JOIN
ATF_R_goods_exams() rge ON rg.group_title = rge.group_title INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title
ORDER BY rge.examination_title, rc.is_russia
GO
/****** Object:  View [dbo].[report_moscow_22_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_22_karantin]
AS
SELECT TOP 100 PERCENT
rk.examination AS examination_title, rc.is_russia, Docs_Conclusions.doc_date, dck.object_title
FROM 
(SELECT doc_id, doc_date FROM ATF_Docs_Conclusions_Examination()) AS Docs_Conclusions INNER JOIN
ATF_Docs_Acts_Goods() dag ON Docs_Conclusions.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_Docs_Conclusions_Karantin() dck ON dag.doc_id = dck.doc_id AND 
dag.good_title = dck.good_title AND dag.production_country = dck.production_country INNER JOIN
ATF_R_karantin() rk ON dck.object_title = rk.object_title
ORDER BY rc.is_russia
GO
/****** Object:  View [dbo].[report_moscow_22_notkarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_22_notkarantin]
AS
SELECT TOP 100 PERCENT
rnk.examination AS examination_title, rc.is_russia, Docs_Conclusions.doc_date, dcnk.object_title
FROM         
(SELECT doc_id, doc_date FROM ATF_Docs_Conclusions_Examination()) AS Docs_Conclusions INNER JOIN
ATF_Docs_Acts_Goods() dag ON Docs_Conclusions.doc_id = dag.doc_id INNER JOIN
ATF_R_countries() rc ON dag.production_country = rc.country_title INNER JOIN
ATF_Docs_Conclusions_NotKarantin() dcnk ON dag.doc_id = dcnk.doc_id AND 
dag.good_title = dcnk.good_title AND dag.production_country = dcnk.production_country INNER JOIN
ATF_R_notkarantin() rnk ON dcnk.object_title = rnk.object_title
ORDER BY rc.is_russia
GO
/****** Object:  View [dbo].[report_moscow_23_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_23_1]
AS
SELECT     
Docs_Conclusions.doc_date, dck.object_title, rg.group_title, 
dag.production_country, dag.weight_unit, dag.weight
FROM         
(SELECT doc_id, doc_date FROM ATF_Docs_Conclusions_Import()) AS Docs_Conclusions INNER JOIN
ATF_Docs_Acts_Goods() dag ON Docs_Conclusions.doc_id = dag.doc_id INNER JOIN
ATF_Docs_Conclusions_Karantin() dck ON dag.doc_id = dck.doc_id AND 
dag.good_title = dck.good_title AND 
dag.production_country = dck.production_country INNER JOIN
ATF_R_goods() rg ON dag.good_title = rg.good_title
WHERE (NOT (dag.weight_unit IS NULL))
GO
/****** Object:  View [dbo].[report_moscow_31_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_31_1]
AS
SELECT TOP (100) PERCENT 
dco.doc_date, dco.category, dcoo.volume, dcoo.volume_unit, dcoo.[count], 
dcoo.exam_trap, dcoo.exam_bait, dcoo.exam_dust
FROM         
ATF_Docs_Conclusions_Objects() dco INNER JOIN
ATF_Docs_CO_Objects() dcoo ON dco.doc_id = dcoo.doc_id
GO
/****** Object:  View [dbo].[report_moscow_32_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[report_moscow_32_1]
AS
SELECT     
dco.doc_date, dcook.object_title, rc.client_name, dcook.exam_method, dcoo.volume, dcoo.volume_unit
FROM         
ATF_Docs_COO_Karantin() dcook INNER JOIN
ATF_Docs_CO_Objects() dcoo ON dcook.doc_id = dcoo.doc_id AND dcook.title = dcoo.title INNER JOIN
ATF_Docs_Conclusions_Objects() dco ON dcoo.doc_id = dco.doc_id INNER JOIN
ATF_R_clients() rc ON dco.client_guid = rc.client_guid
GO
/****** Object:  Table [dbo].[_old_dogs_inns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_old_dogs_inns](
	[ИНН] [nvarchar](13) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_rests]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_rests](
	[inn] [numeric](14, 0) NOT NULL,
	[rest] [decimal](18, 2) NULL,
 CONSTRAINT [PK__rests] PRIMARY KEY CLUSTERED 
(
	[inn] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_test_table_1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_test_table_1](
	[regnumber] [nvarchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_test_table_2]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_test_table_2](
	[regnumber] [nvarchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[4D437F1E-07DE-4C5A-B53D-83B4C5A20C8B]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[4D437F1E-07DE-4C5A-B53D-83B4C5A20C8B](
	[sum_factor] [decimal](3, 2) NOT NULL,
	[title] [nvarchar](300) NOT NULL,
	[title_short] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_services_sum_factors] PRIMARY KEY CLUSTERED 
(
	[sum_factor] ASC,
	[title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[52579ED0-B2FF-4250-BF2F-062B904F8BB0]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[52579ED0-B2FF-4250-BF2F-062B904F8BB0](
	[inspection_id] [int] IDENTITY(1,1) NOT NULL,
	[inspection_title] [nvarchar](500) NULL,
 CONSTRAINT [PK_R_inspections] PRIMARY KEY CLUSTERED 
(
	[inspection_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Acts]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Acts](
	[doc_id] [int] IDENTITY(1,1) NOT NULL,
	[doc_number] [int] NULL,
	[doc_laboratory] [nchar](10) NULL,
	[doc_date] [datetime] NULL,
	[client_adress_warehouse] [nvarchar](200) NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[representative] [nvarchar](200) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Docs_Acts] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Acts_Goods]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Acts_Goods](
	[doc_id] [int] NOT NULL,
	[good_title] [nvarchar](50) NOT NULL,
	[production_country] [nvarchar](100) NOT NULL,
	[places] [int] NULL,
	[places_unit] [nvarchar](50) NULL,
	[weight] [numeric](18, 4) NULL,
	[weight_unit] [nvarchar](50) NULL,
	[samples_count] [int] NULL,
 CONSTRAINT [PK_Docs_Acts_Goods] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[good_title] ASC,
	[production_country] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_CO_Objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_CO_Objects](
	[doc_id] [int] NOT NULL,
	[title] [nvarchar](50) NOT NULL,
	[count] [int] NOT NULL,
	[volume] [numeric](10, 2) NOT NULL,
	[volume_unit] [nvarchar](50) NOT NULL,
	[rayon] [nvarchar](100) NOT NULL,
	[exam_trap] [int] NOT NULL,
	[exam_bait] [int] NOT NULL,
	[exam_dust] [int] NOT NULL,
 CONSTRAINT [PK_Docs_CO_Objects] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Conclusions_Export]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_Export](
	[doc_id] [int] IDENTITY(2000000,1) NOT NULL,
	[doc_number] [int] NULL,
	[doc_date] [datetime] NULL,
	[mark] [nvarchar](100) NULL,
	[transport_type] [nvarchar](100) NULL,
	[transport_number] [nvarchar](50) NULL,
	[bill_type] [nvarchar](100) NULL,
	[bill_number] [nvarchar](150) NULL,
	[bill_date] [nvarchar](20) NULL,
	[sending_to] [nvarchar](100) NOT NULL,
	[addressee] [nvarchar](200) NULL,
	[disinfection] [nvarchar](150) NULL,
	[samples_doc] [nvarchar](200) NULL,
	[samples_doc_number] [nvarchar](20) NULL,
	[samples_doc_date] [nvarchar](20) NULL,
	[samples_action] [nvarchar](300) NULL,
	[warehouse] [nvarchar](500) NULL,
	[inspection] [nvarchar](500) NULL,
	[verdict] [nvarchar](400) NULL,
	[representative] [nvarchar](50) NULL,
	[wood_composition] [nvarchar](500) NULL,
	[origin_rayon] [nvarchar](100) NULL,
	[origin_text] [nvarchar](200) NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[remark] [nvarchar](500) NOT NULL,
	[fact_address] [nvarchar](500) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
	[starting_point] [nvarchar](500) NULL,
	[destination_point] [nvarchar](500) NULL,
	[grounds_document] [nvarchar](500) NULL,
 CONSTRAINT [PK_Docs_Conclusions_Export] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Conclusions_Import]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_Import](
	[doc_id] [int] IDENTITY(1000000,1) NOT NULL,
	[doc_number] [int] NULL,
	[doc_date] [datetime] NULL,
	[mark] [nvarchar](100) NULL,
	[transport_type] [nvarchar](100) NULL,
	[transport_number] [nvarchar](50) NULL,
	[bill_type] [nvarchar](100) NULL,
	[bill_number] [nvarchar](150) NULL,
	[bill_date] [nvarchar](20) NULL,
	[quality_type] [nvarchar](100) NULL,
	[quality_number] [nvarchar](50) NULL,
	[quality_date] [nvarchar](20) NULL,
	[arrived] [nvarchar](100) NOT NULL,
	[arrived_rayon] [nvarchar](100) NULL,
	[ikr_number] [nvarchar](50) NULL,
	[sert_number] [nvarchar](50) NULL,
	[sert_from] [nvarchar](200) NULL,
	[sender] [nvarchar](200) NULL,
	[disinfection] [nvarchar](150) NULL,
	[samples_doc] [nvarchar](200) NULL,
	[samples_doc_number] [nvarchar](20) NULL,
	[samples_doc_date] [nvarchar](20) NULL,
	[samples_action] [nvarchar](300) NULL,
	[warehouse] [nvarchar](500) NULL,
	[inspection] [nvarchar](500) NULL,
	[verdict] [nvarchar](500) NULL,
	[representative] [nvarchar](50) NULL,
	[doc_user] [nvarchar](100) NOT NULL,
	[remark] [nvarchar](500) NOT NULL,
	[fact_address] [nvarchar](500) NULL,
	[source_type] [nvarchar](500) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
	[starting_point] [nvarchar](500) NULL,
	[destination_point] [nvarchar](500) NULL,
	[grounds_document] [nvarchar](500) NULL,
 CONSTRAINT [PK_Docs_Conclusions_Import] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Conclusions_Karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_Karantin](
	[doc_id] [int] NOT NULL,
	[good_title] [nvarchar](50) NOT NULL,
	[production_country] [nvarchar](100) NOT NULL,
	[object_title] [nvarchar](50) NOT NULL,
	[count] [numeric](8, 2) NULL,
	[count_unit] [nvarchar](50) NULL,
	[state] [nvarchar](50) NULL,
 CONSTRAINT [PK_Docs_Conclusions_Karantin_1] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[good_title] ASC,
	[production_country] ASC,
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Conclusions_NotKarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_NotKarantin](
	[doc_id] [int] NOT NULL,
	[good_title] [nvarchar](50) NOT NULL,
	[production_country] [nvarchar](100) NOT NULL,
	[object_title] [nvarchar](50) NOT NULL,
	[state] [nvarchar](50) NULL,
 CONSTRAINT [PK_Docs_Conclusions_NotKarantin] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[good_title] ASC,
	[production_country] ASC,
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_Conclusions_Objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_Conclusions_Objects](
	[doc_id] [int] IDENTITY(1,1) NOT NULL,
	[doc_number] [int] NULL,
	[doc_date] [datetime] NULL,
	[representative] [nvarchar](50) NULL,
	[verdict] [nvarchar](max) NULL,
	[conclusion] [nvarchar](max) NULL,
	[doc_user] [nvarchar](100) NULL,
	[category] [nvarchar](50) NOT NULL,
	[target] [nvarchar](500) NULL,
	[samples] [nvarchar](max) NULL,
	[client_guid] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Docs_Conclusions_Objects] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_COO_Examinations]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_COO_Examinations](
	[doc_id] [int] NOT NULL,
	[title] [nvarchar](50) NOT NULL,
	[object_title] [nvarchar](100) NOT NULL,
	[volume] [numeric](10, 2) NOT NULL,
 CONSTRAINT [PK_Docs_COO_Examinations] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[title] ASC,
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_COO_Karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_COO_Karantin](
	[doc_id] [int] NOT NULL,
	[title] [nvarchar](50) NOT NULL,
	[object_title] [nvarchar](100) NOT NULL,
	[exam_method] [nvarchar](50) NOT NULL,
	[exam_count] [int] NOT NULL,
 CONSTRAINT [PK_Docs_COO_Karantin] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[title] ASC,
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Docs_COO_NotKarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Docs_COO_NotKarantin](
	[doc_id] [int] NOT NULL,
	[title] [nvarchar](50) NOT NULL,
	[object_title] [nvarchar](100) NOT NULL,
	[exam_method] [nvarchar](50) NOT NULL,
	[exam_count] [int] NOT NULL,
 CONSTRAINT [PK_Docs_COO_NotKarantin] PRIMARY KEY CLUSTERED 
(
	[doc_id] ASC,
	[title] ASC,
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[E0FC195E-6AAE-48BB-A6D2-3AC52E088461]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[E0FC195E-6AAE-48BB-A6D2-3AC52E088461](
	[category_title] [nvarchar](150) NOT NULL,
 CONSTRAINT [PK_R_goods_groups_categories] PRIMARY KEY CLUSTERED 
(
	[category_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[H_Queries]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[H_Queries](
	[tbl_name] [nvarchar](100) NOT NULL,
	[tbl_query_type] [nvarchar](50) NOT NULL,
	[tbl_query_text] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[H_ReportsDivisions]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[H_ReportsDivisions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[creation_date] [datetime] NOT NULL,
	[division] [nvarchar](2) NOT NULL,
	[division_title] [nvarchar](50) NULL,
	[date_from] [datetime] NOT NULL,
	[date_to] [datetime] NOT NULL,
	[xml_string] [xml] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[H_ReportsIDs]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[H_ReportsIDs](
	[report_id] [int] NOT NULL,
	[xml_id] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_banks]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_banks](
	[bank_bik] [nvarchar](9) NOT NULL,
	[bank_corr_acc] [numeric](20, 0) NULL,
	[bank_title] [nvarchar](50) NULL,
	[bank_city] [nvarchar](50) NULL,
	[bank_adress] [nvarchar](200) NULL,
 CONSTRAINT [PK_R_banks] PRIMARY KEY CLUSTERED 
(
	[bank_bik] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_bill]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_bill](
	[bill_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_bill] PRIMARY KEY CLUSTERED 
(
	[bill_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_bill_patterns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_bill_patterns](
	[title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_bill_patterns] PRIMARY KEY CLUSTERED 
(
	[title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_bill_patterns_services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_bill_patterns_services](
	[pattern_title] [nvarchar](100) NOT NULL,
	[service_title] [nvarchar](300) NOT NULL,
 CONSTRAINT [PK_R_bill_patterns_services] PRIMARY KEY CLUSTERED 
(
	[pattern_title] ASC,
	[service_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_client_types]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_client_types](
	[type_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_client_types] PRIMARY KEY CLUSTERED 
(
	[type_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_countries]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_countries](
	[country_title] [nvarchar](100) NOT NULL,
	[country_in] [nvarchar](50) NULL,
	[country_out] [nvarchar](50) NULL,
	[is_russia] [bit] NULL,
	[country_sert] [nvarchar](500) NULL,
 CONSTRAINT [PK_References_Countries] PRIMARY KEY CLUSTERED 
(
	[country_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_delivery_foundation]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_delivery_foundation](
	[foundation_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_delivery_foundation] PRIMARY KEY CLUSTERED 
(
	[foundation_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_divisions]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_divisions](
	[division_number] [nvarchar](2) NOT NULL,
	[division_title] [nvarchar](200) NULL,
 CONSTRAINT [PK_R_divisions] PRIMARY KEY CLUSTERED 
(
	[division_number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_examinations]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_examinations](
	[examination_title] [nvarchar](30) NOT NULL,
 CONSTRAINT [PK_R_examinations] PRIMARY KEY CLUSTERED 
(
	[examination_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_goods]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_goods](
	[group_title] [nvarchar](50) NOT NULL,
	[good_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_goods_1] PRIMARY KEY CLUSTERED 
(
	[good_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_goods_exams]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_goods_exams](
	[group_title] [nvarchar](50) NOT NULL,
	[examination_title] [nvarchar](30) NOT NULL,
 CONSTRAINT [PK_R_goods_exams] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC,
	[examination_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_goods_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_goods_groups](
	[group_title] [nvarchar](50) NOT NULL,
	[weight_unit] [nvarchar](50) NULL,
	[is_forest] [bit] NOT NULL,
	[category_title] [nvarchar](150) NULL,
 CONSTRAINT [PK_R_goods_groups] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_karantin](
	[object_title] [nvarchar](100) NOT NULL,
	[examination] [nvarchar](30) NOT NULL,
	[group_title] [nvarchar](100) NOT NULL,
	[object_title_latin] [nvarchar](100) NULL,
 CONSTRAINT [PK_R_karantin] PRIMARY KEY CLUSTERED 
(
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_karantin_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_karantin_groups](
	[group_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_karantin_groups] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_karantin_state]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_karantin_state](
	[state_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_karantin_state] PRIMARY KEY CLUSTERED 
(
	[state_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_marking]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_marking](
	[mark_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_marking] PRIMARY KEY CLUSTERED 
(
	[mark_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_notkarantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_notkarantin](
	[object_title] [nvarchar](100) NOT NULL,
	[examination] [nvarchar](30) NOT NULL,
	[group_title] [nvarchar](100) NOT NULL,
	[object_title_latin] [nvarchar](100) NULL,
 CONSTRAINT [PK_R_notkarantin] PRIMARY KEY CLUSTERED 
(
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_notkarantin_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_notkarantin_groups](
	[group_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_notkarantin_groups] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_objects]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_objects](
	[object_title] [nvarchar](50) NOT NULL,
	[group_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_objects] PRIMARY KEY CLUSTERED 
(
	[object_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_objects_categories]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_objects_categories](
	[category_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_objects_categories] PRIMARY KEY CLUSTERED 
(
	[category_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_objects_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_objects_groups](
	[group_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_objects_groups] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_objects_groups_karantin]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_objects_groups_karantin](
	[karantin_title] [nvarchar](100) NOT NULL,
	[object_group_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_R_objects_groups_karantin] PRIMARY KEY CLUSTERED 
(
	[karantin_title] ASC,
	[object_group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_objects_target_type]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_objects_target_type](
	[type_id] [int] IDENTITY(1,1) NOT NULL,
	[type_text] [nvarchar](500) NOT NULL,
 CONSTRAINT [PK_R_objects_target_type] PRIMARY KEY CLUSTERED 
(
	[type_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_places_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_places_units](
	[unit_title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_References_places_units] PRIMARY KEY CLUSTERED 
(
	[unit_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_samples_actions]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_samples_actions](
	[action_title] [nvarchar](300) NOT NULL,
 CONSTRAINT [PK_R_samples_actions] PRIMARY KEY CLUSTERED 
(
	[action_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_samples_source_type]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_samples_source_type](
	[type_id] [int] IDENTITY(1,1) NOT NULL,
	[type_text] [nvarchar](500) NOT NULL,
 CONSTRAINT [PK_R_samples_source_type] PRIMARY KEY CLUSTERED 
(
	[type_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_services]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_services](
	[title] [nvarchar](300) NOT NULL,
	[title_short] [nvarchar](100) NOT NULL,
	[unit] [nvarchar](100) NOT NULL,
	[rate] [numeric](10, 2) NOT NULL,
	[group_title] [nvarchar](100) NOT NULL,
	[codes] [nvarchar](100) NULL,
 CONSTRAINT [PK_R_services] PRIMARY KEY CLUSTERED 
(
	[title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_services_groups]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_services_groups](
	[group_title] [nvarchar](100) NOT NULL,
	[group_factor] [numeric](10, 2) NOT NULL,
 CONSTRAINT [PK_R_services_groups] PRIMARY KEY CLUSTERED 
(
	[group_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_services_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_services_units](
	[unit_title] [nvarchar](100) NOT NULL,
	[unit_code] [nvarchar](50) NULL,
 CONSTRAINT [PK_R_services_units] PRIMARY KEY CLUSTERED 
(
	[unit_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_Sverdlovsk_region_rayons]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_Sverdlovsk_region_rayons](
	[rayon_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_Sverdlovsk_region_rayons] PRIMARY KEY CLUSTERED 
(
	[rayon_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_transport]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_transport](
	[transport_title] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_R_transport] PRIMARY KEY CLUSTERED 
(
	[transport_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_users]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_users](
	[user_name] [nvarchar](100) NOT NULL,
	[user_division] [nvarchar](2) NOT NULL,
	[password_hash] [int] NOT NULL,
	[restricts] [nvarchar](50) NULL,
 CONSTRAINT [PK_R_users] PRIMARY KEY CLUSTERED 
(
	[user_name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_verdict_patterns]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_verdict_patterns](
	[pattern_id] [int] IDENTITY(1,1) NOT NULL,
	[pattern_text] [nvarchar](400) NOT NULL,
 CONSTRAINT [PK_R_verdict_patterns] PRIMARY KEY CLUSTERED 
(
	[pattern_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_weight_units]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_weight_units](
	[unit_title] [nvarchar](50) NOT NULL,
	[mnemonic] [nvarchar](50) NULL,
 CONSTRAINT [PK_References_weight_units] PRIMARY KEY CLUSTERED 
(
	[unit_title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_wood_composition]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_wood_composition](
	[text] [nvarchar](100) NOT NULL,
	[is_kind] [bit] NULL,
	[is_board] [bit] NULL,
	[is_timber] [bit] NULL,
 CONSTRAINT [PK_R_wood_composition] PRIMARY KEY CLUSTERED 
(
	[text] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[t1]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t1](
	[ind] [int] NULL,
	[txt] [nvarchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[t2]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t2](
	[ind] [int] NULL,
	[txt] [nvarchar](10) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_R_verdict_patterns]    Script Date: 21.03.2024 10:31:31 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_R_verdict_patterns] ON [dbo].[R_verdict_patterns]
(
	[pattern_text] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[4D437F1E-07DE-4C5A-B53D-83B4C5A20C8B] ADD  CONSTRAINT [DF_R_services_sum_factors_sum_factor]  DEFAULT ((1.0)) FOR [sum_factor]
GO
ALTER TABLE [dbo].[4D437F1E-07DE-4C5A-B53D-83B4C5A20C8B] ADD  CONSTRAINT [DF_R_services_sum_factors_title]  DEFAULT ('') FOR [title]
GO
ALTER TABLE [dbo].[Docs_Acts] ADD  CONSTRAINT [DF_Docs_Acts_doc_date]  DEFAULT (getdate()) FOR [doc_date]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_doc_sum]  DEFAULT ((0.0)) FOR [doc_sum]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_tax_nds]  DEFAULT ((18.00)) FOR [tax_nds]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_is_russia]  DEFAULT ((1)) FOR [is_russia]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_is_transacted]  DEFAULT ((0)) FOR [is_transacted]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_bill_type]  DEFAULT ((0)) FOR [bill_type]
GO
ALTER TABLE [dbo].[Docs_Bills] ADD  CONSTRAINT [DF_Docs_Bills_is_cash]  DEFAULT ((0)) FOR [is_cash]
GO
ALTER TABLE [dbo].[Docs_Bills_Services] ADD  CONSTRAINT [DF_Docs_Bills_Services_bill_type]  DEFAULT ((0)) FOR [bill_type]
GO
ALTER TABLE [dbo].[Docs_Bills_Services] ADD  CONSTRAINT [DF_Docs_Bills_Services_rate]  DEFAULT ((0.0)) FOR [rate]
GO
ALTER TABLE [dbo].[Docs_Bills_Services] ADD  CONSTRAINT [DF_Docs_Bills_Services_count]  DEFAULT ((1)) FOR [count]
GO
ALTER TABLE [dbo].[Docs_Bills_Services] ADD  CONSTRAINT [DF_Docs_Bills_Services_sum_factor_1]  DEFAULT ((1.0)) FOR [sum_factor]
GO
ALTER TABLE [dbo].[Docs_CO_Objects] ADD  CONSTRAINT [DF_Docs_CO_Objects_count]  DEFAULT ((0)) FOR [count]
GO
ALTER TABLE [dbo].[Docs_CO_Objects] ADD  CONSTRAINT [DF_Docs_CO_Objects_exam_trap]  DEFAULT ((0)) FOR [exam_trap]
GO
ALTER TABLE [dbo].[Docs_CO_Objects] ADD  CONSTRAINT [DF_Docs_CO_Objects_exam_bait]  DEFAULT ((0)) FOR [exam_bait]
GO
ALTER TABLE [dbo].[Docs_CO_Objects] ADD  CONSTRAINT [DF_Docs_CO_Objects_exam_dust]  DEFAULT ((0)) FOR [exam_dust]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] ADD  CONSTRAINT [DF_Docs_Conclusions_Export_doc_date]  DEFAULT (getdate()) FOR [doc_date]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] ADD  CONSTRAINT [DF_Docs_Conclusions_Export_remark]  DEFAULT ('') FOR [remark]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] ADD  CONSTRAINT [DF_Docs_Conclusions_Import_doc_date]  DEFAULT (getdate()) FOR [doc_date]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] ADD  CONSTRAINT [DF_Docs_Conclusions_Import_remark]  DEFAULT ('') FOR [remark]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects] ADD  CONSTRAINT [DF_Docs_Conclusions_Objects_doc_date]  DEFAULT (getdate()) FOR [doc_date]
GO
ALTER TABLE [dbo].[Docs_COO_Examinations] ADD  CONSTRAINT [DF_Docs_COO_Examinations_volume]  DEFAULT ((0)) FOR [volume]
GO
ALTER TABLE [dbo].[Docs_COO_Karantin] ADD  CONSTRAINT [DF_Docs_COO_Karantin_exam_count]  DEFAULT ((0)) FOR [exam_count]
GO
ALTER TABLE [dbo].[Docs_COO_NotKarantin] ADD  CONSTRAINT [DF_Docs_COO_NotKarantin_exam_count]  DEFAULT ((0)) FOR [exam_count]
GO
ALTER TABLE [dbo].[R_clients] ADD  CONSTRAINT [DF_R_clients_client_region]  DEFAULT (N' ') FOR [client_region]
GO
ALTER TABLE [dbo].[R_countries] ADD  CONSTRAINT [DF_References_Countries_is_russia]  DEFAULT ((0)) FOR [is_russia]
GO
ALTER TABLE [dbo].[R_goods_groups] ADD  CONSTRAINT [DF_R_goods_groups_is_forest]  DEFAULT ((0)) FOR [is_forest]
GO
ALTER TABLE [dbo].[R_users] ADD  CONSTRAINT [DF_R_users_user_division]  DEFAULT ((1)) FOR [user_division]
GO
ALTER TABLE [dbo].[R_users] ADD  CONSTRAINT [DF_R_users_password_hash]  DEFAULT ((757602046)) FOR [password_hash]
GO
ALTER TABLE [dbo].[R_users] ADD  CONSTRAINT [DF_R_users_restricts]  DEFAULT ('') FOR [restricts]
GO
ALTER TABLE [dbo].[R_wood_composition] ADD  CONSTRAINT [DF_R_wood_composition_is_kind]  DEFAULT ((0)) FOR [is_kind]
GO
ALTER TABLE [dbo].[R_wood_composition] ADD  CONSTRAINT [DF_R_wood_composition_is_board]  DEFAULT ((0)) FOR [is_board]
GO
ALTER TABLE [dbo].[R_wood_composition] ADD  CONSTRAINT [DF_R_wood_composition_is_timber]  DEFAULT ((0)) FOR [is_timber]
GO
ALTER TABLE [dbo].[Docs_Acts]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Acts] CHECK CONSTRAINT [FK_Docs_Acts_R_clients]
GO
ALTER TABLE [dbo].[Docs_Acts]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_R_users] FOREIGN KEY([doc_user])
REFERENCES [dbo].[R_users] ([user_name])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Acts] CHECK CONSTRAINT [FK_Docs_Acts_R_users]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH NOCHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_Docs_Acts] FOREIGN KEY([doc_id])
REFERENCES [dbo].[Docs_Acts] ([doc_id])
ON DELETE CASCADE
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] NOCHECK CONSTRAINT [FK_Docs_Acts_Goods_Docs_Acts]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH NOCHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_Docs_Conclusions_Export] FOREIGN KEY([doc_id])
REFERENCES [dbo].[Docs_Conclusions_Export] ([doc_id])
ON DELETE CASCADE
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] NOCHECK CONSTRAINT [FK_Docs_Acts_Goods_Docs_Conclusions_Export]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH NOCHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_Docs_Conclusions_Import] FOREIGN KEY([doc_id])
REFERENCES [dbo].[Docs_Conclusions_Import] ([doc_id])
ON DELETE CASCADE
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] NOCHECK CONSTRAINT [FK_Docs_Acts_Goods_Docs_Conclusions_Import]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_R_countries] FOREIGN KEY([production_country])
REFERENCES [dbo].[R_countries] ([country_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] CHECK CONSTRAINT [FK_Docs_Acts_Goods_R_countries]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_R_goods] FOREIGN KEY([good_title])
REFERENCES [dbo].[R_goods] ([good_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] CHECK CONSTRAINT [FK_Docs_Acts_Goods_R_goods]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_R_places_units] FOREIGN KEY([places_unit])
REFERENCES [dbo].[R_places_units] ([unit_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] CHECK CONSTRAINT [FK_Docs_Acts_Goods_R_places_units]
GO
ALTER TABLE [dbo].[Docs_Acts_Goods]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Acts_Goods_R_weight_units] FOREIGN KEY([weight_unit])
REFERENCES [dbo].[R_weight_units] ([unit_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Acts_Goods] CHECK CONSTRAINT [FK_Docs_Acts_Goods_R_weight_units]
GO
ALTER TABLE [dbo].[Docs_Agreements]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Agreements_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Agreements] CHECK CONSTRAINT [FK_Docs_Agreements_R_clients]
GO
ALTER TABLE [dbo].[Docs_Agreements]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Agreements_R_users] FOREIGN KEY([doc_user])
REFERENCES [dbo].[R_users] ([user_name])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Agreements] CHECK CONSTRAINT [FK_Docs_Agreements_R_users]
GO
ALTER TABLE [dbo].[Docs_Bills]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Bills_Docs_Agreements] FOREIGN KEY([doc_id])
REFERENCES [dbo].[Docs_Agreements] ([doc_id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_Bills] CHECK CONSTRAINT [FK_Docs_Bills_Docs_Agreements]
GO
ALTER TABLE [dbo].[Docs_Bills_Services]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Bills_Services_Docs_Bills] FOREIGN KEY([doc_id], [bill_type], [doc_line_number])
REFERENCES [dbo].[Docs_Bills] ([doc_id], [bill_type], [line_number])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_Bills_Services] CHECK CONSTRAINT [FK_Docs_Bills_Services_Docs_Bills]
GO
ALTER TABLE [dbo].[Docs_Bills_Services]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Bills_Services_R_services_sum_factors] FOREIGN KEY([sum_factor], [sum_factor_title])
REFERENCES [dbo].[4D437F1E-07DE-4C5A-B53D-83B4C5A20C8B] ([sum_factor], [title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Bills_Services] CHECK CONSTRAINT [FK_Docs_Bills_Services_R_services_sum_factors]
GO
ALTER TABLE [dbo].[Docs_CO_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_CO_Objects_Docs_Conclusions_Objects] FOREIGN KEY([doc_id])
REFERENCES [dbo].[Docs_Conclusions_Objects] ([doc_id])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_CO_Objects] CHECK CONSTRAINT [FK_Docs_CO_Objects_Docs_Conclusions_Objects]
GO
ALTER TABLE [dbo].[Docs_CO_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_CO_Objects_R_objects] FOREIGN KEY([title])
REFERENCES [dbo].[R_objects] ([object_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_CO_Objects] CHECK CONSTRAINT [FK_Docs_CO_Objects_R_objects]
GO
ALTER TABLE [dbo].[Docs_CO_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_CO_Objects_R_Sverdlovsk_region_rayons] FOREIGN KEY([rayon])
REFERENCES [dbo].[R_Sverdlovsk_region_rayons] ([rayon_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_CO_Objects] CHECK CONSTRAINT [FK_Docs_CO_Objects_R_Sverdlovsk_region_rayons]
GO
ALTER TABLE [dbo].[Docs_CO_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_CO_Objects_R_weight_units] FOREIGN KEY([volume_unit])
REFERENCES [dbo].[R_weight_units] ([unit_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_CO_Objects] CHECK CONSTRAINT [FK_Docs_CO_Objects_R_weight_units]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Examination_R_bill] FOREIGN KEY([bill_type])
REFERENCES [dbo].[R_bill] ([bill_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination] CHECK CONSTRAINT [FK_Docs_Conclusions_Examination_R_bill]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Examination_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination] CHECK CONSTRAINT [FK_Docs_Conclusions_Examination_R_clients]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Examination_R_countriess] FOREIGN KEY([target_or_source_dir])
REFERENCES [dbo].[R_countries] ([country_title])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination] CHECK CONSTRAINT [FK_Docs_Conclusions_Examination_R_countriess]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Examination_R_transport] FOREIGN KEY([transport_type])
REFERENCES [dbo].[R_transport] ([transport_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Examination] CHECK CONSTRAINT [FK_Docs_Conclusions_Examination_R_transport]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_bill] FOREIGN KEY([bill_type])
REFERENCES [dbo].[R_bill] ([bill_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_bill]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_clients]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_countries] FOREIGN KEY([sending_to])
REFERENCES [dbo].[R_countries] ([country_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_countries]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_marking] FOREIGN KEY([mark])
REFERENCES [dbo].[R_marking] ([mark_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_marking]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_samples_actions] FOREIGN KEY([samples_action])
REFERENCES [dbo].[R_samples_actions] ([action_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_samples_actions]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_Sverdlovsk_region_rayons] FOREIGN KEY([origin_rayon])
REFERENCES [dbo].[R_Sverdlovsk_region_rayons] ([rayon_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_Sverdlovsk_region_rayons]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_transport] FOREIGN KEY([transport_type])
REFERENCES [dbo].[R_transport] ([transport_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_transport]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Export_R_users] FOREIGN KEY([doc_user])
REFERENCES [dbo].[R_users] ([user_name])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Export] CHECK CONSTRAINT [FK_Docs_Conclusions_Export_R_users]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_bill] FOREIGN KEY([bill_type])
REFERENCES [dbo].[R_bill] ([bill_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_bill]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_clients]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_countries] FOREIGN KEY([arrived])
REFERENCES [dbo].[R_countries] ([country_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_countries]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_delivery_foundation] FOREIGN KEY([quality_type])
REFERENCES [dbo].[R_delivery_foundation] ([foundation_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_delivery_foundation]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_marking] FOREIGN KEY([mark])
REFERENCES [dbo].[R_marking] ([mark_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_marking]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_samples_actions] FOREIGN KEY([samples_action])
REFERENCES [dbo].[R_samples_actions] ([action_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_samples_actions]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_Sverdlovsk_region_rayons] FOREIGN KEY([arrived_rayon])
REFERENCES [dbo].[R_Sverdlovsk_region_rayons] ([rayon_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_Sverdlovsk_region_rayons]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_transport] FOREIGN KEY([transport_type])
REFERENCES [dbo].[R_transport] ([transport_title])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_transport]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Import_R_users] FOREIGN KEY([doc_user])
REFERENCES [dbo].[R_users] ([user_name])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Import] CHECK CONSTRAINT [FK_Docs_Conclusions_Import_R_users]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Karantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Karantin_Docs_Acts_Goods] FOREIGN KEY([doc_id], [good_title], [production_country])
REFERENCES [dbo].[Docs_Acts_Goods] ([doc_id], [good_title], [production_country])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Karantin] CHECK CONSTRAINT [FK_Docs_Conclusions_Karantin_Docs_Acts_Goods]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Karantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Karantin_R_karantin_state] FOREIGN KEY([state])
REFERENCES [dbo].[R_karantin_state] ([state_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Karantin] CHECK CONSTRAINT [FK_Docs_Conclusions_Karantin_R_karantin_state]
GO
ALTER TABLE [dbo].[Docs_Conclusions_NotKarantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_NotKarantin_Docs_Acts_Goods] FOREIGN KEY([doc_id], [good_title], [production_country])
REFERENCES [dbo].[Docs_Acts_Goods] ([doc_id], [good_title], [production_country])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_NotKarantin] CHECK CONSTRAINT [FK_Docs_Conclusions_NotKarantin_Docs_Acts_Goods]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Objects_R_clients] FOREIGN KEY([client_guid])
REFERENCES [dbo].[R_clients] ([client_guid])
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects] CHECK CONSTRAINT [FK_Docs_Conclusions_Objects_R_clients]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Objects_R_objects_categories] FOREIGN KEY([category])
REFERENCES [dbo].[R_objects_categories] ([category_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects] CHECK CONSTRAINT [FK_Docs_Conclusions_Objects_R_objects_categories]
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects]  WITH CHECK ADD  CONSTRAINT [FK_Docs_Conclusions_Objects_R_users] FOREIGN KEY([doc_user])
REFERENCES [dbo].[R_users] ([user_name])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_Conclusions_Objects] CHECK CONSTRAINT [FK_Docs_Conclusions_Objects_R_users]
GO
ALTER TABLE [dbo].[Docs_COO_Examinations]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_Examinations_Docs_CO_Objects] FOREIGN KEY([doc_id], [title])
REFERENCES [dbo].[Docs_CO_Objects] ([doc_id], [title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_Examinations] CHECK CONSTRAINT [FK_Docs_COO_Examinations_Docs_CO_Objects]
GO
ALTER TABLE [dbo].[Docs_COO_Examinations]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_Examinations_R_karantin] FOREIGN KEY([object_title])
REFERENCES [dbo].[R_karantin] ([object_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_Examinations] CHECK CONSTRAINT [FK_Docs_COO_Examinations_R_karantin]
GO
ALTER TABLE [dbo].[Docs_COO_Karantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_Karantin_Docs_CO_Objects] FOREIGN KEY([doc_id], [title])
REFERENCES [dbo].[Docs_CO_Objects] ([doc_id], [title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_Karantin] CHECK CONSTRAINT [FK_Docs_COO_Karantin_Docs_CO_Objects]
GO
ALTER TABLE [dbo].[Docs_COO_Karantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_Karantin_R_karantin] FOREIGN KEY([object_title])
REFERENCES [dbo].[R_karantin] ([object_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_Karantin] CHECK CONSTRAINT [FK_Docs_COO_Karantin_R_karantin]
GO
ALTER TABLE [dbo].[Docs_COO_NotKarantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_NotKarantin_Docs_CO_Objects] FOREIGN KEY([doc_id], [title])
REFERENCES [dbo].[Docs_CO_Objects] ([doc_id], [title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_NotKarantin] CHECK CONSTRAINT [FK_Docs_COO_NotKarantin_Docs_CO_Objects]
GO
ALTER TABLE [dbo].[Docs_COO_NotKarantin]  WITH CHECK ADD  CONSTRAINT [FK_Docs_COO_NotKarantin_R_notkarantin] FOREIGN KEY([object_title])
REFERENCES [dbo].[R_notkarantin] ([object_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Docs_COO_NotKarantin] CHECK CONSTRAINT [FK_Docs_COO_NotKarantin_R_notkarantin]
GO
ALTER TABLE [dbo].[R_bill_patterns_services]  WITH CHECK ADD  CONSTRAINT [FK_R_bill_patterns_services_R_bill_patterns] FOREIGN KEY([pattern_title])
REFERENCES [dbo].[R_bill_patterns] ([title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_bill_patterns_services] CHECK CONSTRAINT [FK_R_bill_patterns_services_R_bill_patterns]
GO
ALTER TABLE [dbo].[R_bill_patterns_services]  WITH CHECK ADD  CONSTRAINT [FK_R_bill_patterns_services_R_services] FOREIGN KEY([service_title])
REFERENCES [dbo].[R_services] ([title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_bill_patterns_services] CHECK CONSTRAINT [FK_R_bill_patterns_services_R_services]
GO
ALTER TABLE [dbo].[R_clients]  WITH CHECK ADD  CONSTRAINT [FK_R_banks_R_clients] FOREIGN KEY([client_bank_bik])
REFERENCES [dbo].[R_banks] ([bank_bik])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_clients] CHECK CONSTRAINT [FK_R_banks_R_clients]
GO
ALTER TABLE [dbo].[R_clients]  WITH NOCHECK ADD  CONSTRAINT [FK_R_client_types_R_clients] FOREIGN KEY([client_type])
REFERENCES [dbo].[R_client_types] ([type_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_clients] CHECK CONSTRAINT [FK_R_client_types_R_clients]
GO
ALTER TABLE [dbo].[R_goods]  WITH CHECK ADD  CONSTRAINT [FK_R_goods_R_goods_groups] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_goods_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_goods] CHECK CONSTRAINT [FK_R_goods_R_goods_groups]
GO
ALTER TABLE [dbo].[R_goods_exams]  WITH CHECK ADD  CONSTRAINT [FK_R_goods_exams_R_examinations] FOREIGN KEY([examination_title])
REFERENCES [dbo].[R_examinations] ([examination_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_goods_exams] CHECK CONSTRAINT [FK_R_goods_exams_R_examinations]
GO
ALTER TABLE [dbo].[R_goods_exams]  WITH CHECK ADD  CONSTRAINT [FK_R_goods_exams_R_goods_groups] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_goods_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_goods_exams] CHECK CONSTRAINT [FK_R_goods_exams_R_goods_groups]
GO
ALTER TABLE [dbo].[R_goods_groups]  WITH CHECK ADD  CONSTRAINT [FK_R_goods_groups_R_goods_groups_categories] FOREIGN KEY([category_title])
REFERENCES [dbo].[E0FC195E-6AAE-48BB-A6D2-3AC52E088461] ([category_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_goods_groups] CHECK CONSTRAINT [FK_R_goods_groups_R_goods_groups_categories]
GO
ALTER TABLE [dbo].[R_goods_groups]  WITH CHECK ADD  CONSTRAINT [FK_R_goods_groups_R_weight_units] FOREIGN KEY([weight_unit])
REFERENCES [dbo].[R_weight_units] ([unit_title])
GO
ALTER TABLE [dbo].[R_goods_groups] CHECK CONSTRAINT [FK_R_goods_groups_R_weight_units]
GO
ALTER TABLE [dbo].[R_karantin]  WITH CHECK ADD  CONSTRAINT [FK_R_karantin_R_examinations] FOREIGN KEY([examination])
REFERENCES [dbo].[R_examinations] ([examination_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_karantin] CHECK CONSTRAINT [FK_R_karantin_R_examinations]
GO
ALTER TABLE [dbo].[R_karantin]  WITH CHECK ADD  CONSTRAINT [FK_R_karantin_R_karantin_groups] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_karantin_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_karantin] CHECK CONSTRAINT [FK_R_karantin_R_karantin_groups]
GO
ALTER TABLE [dbo].[R_notkarantin]  WITH CHECK ADD  CONSTRAINT [FK_R_notkarantin_R_examinations] FOREIGN KEY([examination])
REFERENCES [dbo].[R_examinations] ([examination_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_notkarantin] CHECK CONSTRAINT [FK_R_notkarantin_R_examinations]
GO
ALTER TABLE [dbo].[R_notkarantin]  WITH CHECK ADD  CONSTRAINT [FK_R_notkarantin_R_karantin_groups] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_notkarantin_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_notkarantin] CHECK CONSTRAINT [FK_R_notkarantin_R_karantin_groups]
GO
ALTER TABLE [dbo].[R_objects]  WITH CHECK ADD  CONSTRAINT [FK_R_objects_R_objects_groups] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_objects_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_objects] CHECK CONSTRAINT [FK_R_objects_R_objects_groups]
GO
ALTER TABLE [dbo].[R_objects_groups_karantin]  WITH CHECK ADD  CONSTRAINT [FK_R_objects_groups_karantin_R_karantin] FOREIGN KEY([karantin_title])
REFERENCES [dbo].[R_karantin] ([object_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_objects_groups_karantin] CHECK CONSTRAINT [FK_R_objects_groups_karantin_R_karantin]
GO
ALTER TABLE [dbo].[R_objects_groups_karantin]  WITH CHECK ADD  CONSTRAINT [FK_R_objects_groups_karantin_R_objects_groups] FOREIGN KEY([object_group_title])
REFERENCES [dbo].[R_objects_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_objects_groups_karantin] CHECK CONSTRAINT [FK_R_objects_groups_karantin_R_objects_groups]
GO
ALTER TABLE [dbo].[R_services]  WITH CHECK ADD  CONSTRAINT [FK_R_services_R_services_groups1] FOREIGN KEY([group_title])
REFERENCES [dbo].[R_services_groups] ([group_title])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[R_services] CHECK CONSTRAINT [FK_R_services_R_services_groups1]
GO
ALTER TABLE [dbo].[R_services]  WITH CHECK ADD  CONSTRAINT [FK_R_services_R_services_units] FOREIGN KEY([unit])
REFERENCES [dbo].[R_services_units] ([unit_title])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_services] CHECK CONSTRAINT [FK_R_services_R_services_units]
GO
ALTER TABLE [dbo].[R_users]  WITH CHECK ADD  CONSTRAINT [FK_R_users_R_divisions] FOREIGN KEY([user_division])
REFERENCES [dbo].[R_divisions] ([division_number])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[R_users] CHECK CONSTRAINT [FK_R_users_R_divisions]
GO
/****** Object:  StoredProcedure [dbo].[CreateXMLDescriptors]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[CreateXMLDescriptors]
AS
BEGIN

declare @report_id int

declare xml_ids cursor for 
	select report_id from H_ReportsIDs

OPEN xml_ids
FETCH NEXT FROM xml_ids INTO @report_id
WHILE @@FETCH_STATUS = 0
BEGIN
	declare @idoc int
	declare @xml_string xml
	set @xml_string = (select xml_string from H_ReportsDivisions where id = @report_id)

	exec sp_xml_preparedocument @idoc output, @xml_string

	update H_ReportsIDs set xml_id = @idoc where report_id = @report_id

	FETCH NEXT FROM xml_ids INTO @report_id
END 
CLOSE xml_ids
DEALLOCATE xml_ids

	RETURN 
END
GO
/****** Object:  StoredProcedure [dbo].[CreatorATF]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[CreatorATF]
	@operation_code int -- 1 - удаление, 0 - создание
AS
BEGIN

if @operation_code = 0
begin
	exec CreatorATF 1
end

--шаблон тела функции
declare @pattern nvarchar(max)
set @pattern = 
N'
CREATE FUNCTION [dbo].[ATF_{table_name}]
(
)
RETURNS @result TABLE 
(
	{columns}, primary key ({keys}) WITH (IGNORE_DUP_KEY = ON)
)
AS
BEGIN

declare @cnt int
set @cnt = (select count(xml_id) from H_ReportsIDs)

if @cnt = 0
begin 
	insert into @result
		select {columns_list} from {table_name}
	return
end

declare @report_id int, @xml_id int

declare xml_strings cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_strings
FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	insert into @result
		select * from openxml(@xml_id, N''/tables/{table_name}/row'') with ({columns_without_nulls})
		except
		select * from @result

	FETCH NEXT FROM xml_strings INTO @report_id, @xml_id
END 
CLOSE xml_strings
DEALLOCATE xml_strings
	
	RETURN 
END
'
declare @delete nvarchar(max)
set @delete = 
N'
IF EXISTS 
(SELECT * FROM sys.objects 
WHERE 
object_id = OBJECT_ID(N''[dbo].[ATF_{table_name}]'') AND 
type in (N''FN'', N''IF'', N''TF'', N''FS'', N''FT''))
drop function [dbo].[ATF_{table_name}]
'

--курсор по справочникам
declare @name nvarchar(max), 
		@string nvarchar(max), 
		@string_without_nulls nvarchar(max), 
		@name_column nvarchar(max),
		@is_primary_key int
declare refs cursor for 
	select distinct [name] from H_ATF_Columns order by [name]

OPEN refs
FETCH NEXT FROM refs INTO @name
WHILE @@FETCH_STATUS = 0
BEGIN
	declare @pattern1 nvarchar(max)
	
	if @operation_code = 0
	begin
		set @pattern1 = replace(@pattern,'{table_name}',@name)

		declare @columns nvarchar(max), 
			    @columns_list nvarchar(max),
				@columns_without_nulls nvarchar(max),
				@keys nvarchar(max)
		set @columns = ''
		set @columns_list = ''
		set @columns_without_nulls = ''
		set @keys = ''

		declare refs_columns cursor for 
			select string, string_without_nulls, name_column, is_primary_key from H_ATF_Columns where [name] = @name
		OPEN refs_columns
		FETCH NEXT FROM refs_columns INTO @string, @string_without_nulls, @name_column, @is_primary_key
		WHILE @@FETCH_STATUS = 0
		BEGIN		
			set @columns = @columns + @string + ', '
			set @columns_list = @columns_list + @name_column + ', '
			set @columns_without_nulls = @columns_without_nulls + @string_without_nulls  + ', '
			if @is_primary_key = 1
				set @keys = @keys + @name_column + ', '
		
			FETCH NEXT FROM refs_columns INTO @string, @string_without_nulls, @name_column, @is_primary_key
		end
		CLOSE refs_columns
		DEALLOCATE refs_columns
		set @columns = substring(@columns, 0, len(@columns))		
		set @columns_list = substring(@columns_list, 0, len(@columns_list))	
		set @columns_without_nulls = substring(@columns_without_nulls, 0, len(@columns_without_nulls))	
		set @keys = substring(@keys, 0, len(@keys))
		
		set @pattern1 = replace(@pattern1,'{columns}',@columns)
		set @pattern1 = replace(@pattern1,'{columns_list}',@columns_list)
		set @pattern1 = replace(@pattern1,'{columns_without_nulls}',@columns_without_nulls)
		set @pattern1 = replace(@pattern1,'{keys}',@keys)

	end
	if @operation_code = 1
	begin		
		set @pattern1 = replace(@delete,'{table_name}',@name)
	end

	BEGIN TRY
		exec sp_executesql @pattern1
	END TRY
	BEGIN CATCH
		print @pattern1
--		select
--        ERROR_NUMBER(),
--        ERROR_SEVERITY(),
--        ERROR_STATE(),
--        ERROR_PROCEDURE(),
--        ERROR_LINE(),
--        ERROR_MESSAGE()
	END CATCH
		

	FETCH NEXT FROM refs INTO @name
END 
CLOSE refs
DEALLOCATE refs

	RETURN 
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteXMLDescriptors]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteXMLDescriptors]
AS
BEGIN

declare @report_id int, @xml_id int

declare xml_ids cursor for 
	select report_id, xml_id from H_ReportsIDs

OPEN xml_ids
FETCH NEXT FROM xml_ids INTO @report_id, @xml_id
WHILE @@FETCH_STATUS = 0
BEGIN
	exec sp_xml_removedocument @xml_id

	update H_ReportsIDs set xml_id = NULL where report_id = @report_id

	FETCH NEXT FROM xml_ids INTO @report_id, @xml_id
END 
CLOSE xml_ids
DEALLOCATE xml_ids

	RETURN 
END
GO
/****** Object:  StoredProcedure [dbo].[GetXML]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetXML]
(
	@date_begin datetime,
	@date_end datetime,
	@amplifyer_mod int,
	@division nvarchar(50)
)
AS
BEGIN

declare @amplifyer int
set @amplifyer = @amplifyer_mod*10000000

declare @table_in_xml nvarchar(max)
declare @db_in_xml nvarchar(max)
declare @sql_string nvarchar(4000)
declare @tbl_name nvarchar(100), @tbl_query_type nvarchar(50), @tbl_query_text nvarchar(max)
declare queries cursor for 
	select * from H_Queries where tbl_query_type = '1' and tbl_query_text is not null

set @db_in_xml = ''

--данные
OPEN queries
FETCH NEXT FROM queries INTO @tbl_name, @tbl_query_type, @tbl_query_text
WHILE @@FETCH_STATUS = 0
BEGIN
	set @table_in_xml = ''
	set @sql_string = 'set @table_in_xmlOUT = (' + @tbl_query_text + ' for xml raw, root(''' + @tbl_name + '''))'
	exec sp_executesql 
		@sql_string, 
		N'@table_in_xmlOUT nvarchar(max) out, @date_begin datetime, @date_end datetime, @amplifyer int', 
		@table_in_xmlOUT = @table_in_xml out, @date_begin = @date_begin, @date_end = @date_end, @amplifyer = @amplifyer
	set @db_in_xml = @db_in_xml + isnull(@table_in_xml, '')

	FETCH NEXT FROM queries INTO @tbl_name, @tbl_query_type, @tbl_query_text
END 
CLOSE queries
DEALLOCATE queries

declare @name nvarchar(50)
declare names cursor for 
	select [name] from sys.tables where 
		[name] not like '%sys%' and 
		[name] like 'R%'

OPEN names
FETCH NEXT FROM names INTO @name
WHILE @@FETCH_STATUS = 0
BEGIN
	set @table_in_xml = ''
	set @sql_string = 'set @table_in_xmlOUT = (SELECT * FROM ' + @name + ' for xml raw, root(''' + @name + '''))'
	exec sp_executesql @sql_string, N'@table_in_xmlOUT nvarchar(max) out', @table_in_xmlOUT = @table_in_xml out
	set @db_in_xml = @db_in_xml + isnull(@table_in_xml, '')

	FETCH NEXT FROM names INTO @name
END 
CLOSE names
DEALLOCATE names

set @db_in_xml = '<tables>' + @db_in_xml + '</tables>'

declare @xml xml
set @xml = @db_in_xml

declare @strpattern nvarchar(max)
set @strpattern = 
'
set @xmlOUT.modify(''      
insert (            
			attribute dateBegin {"@date_begin"},           
			attribute dateEnd {"@date_end"},
			attribute devisionNumber {"@amplifyer_mod"},
			attribute devisionTitle {"@division"}
        )           
into (/tables[1])'')
'
set @strpattern = replace(@strpattern, '@date_begin', convert(nvarchar, @date_begin, 126))
set @strpattern = replace(@strpattern, '@date_end', convert(nvarchar, @date_end, 126))
set @strpattern = replace(@strpattern, '@amplifyer_mod', @amplifyer_mod)
set @strpattern = replace(@strpattern, '@division', @division)

exec sp_executesql @strpattern, N'@xmlOUT xml out', @xmlOUT = @xml out

select @xml as xml_string, len(@db_in_xml) as [length]

END
GO
/****** Object:  StoredProcedure [dbo].[SaveXML]    Script Date: 21.03.2024 10:31:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SaveXML]
	@db_in_string nvarchar(max)
AS
BEGIN

declare @db_in_xml xml
set @db_in_xml = cast(@db_in_string as xml)

insert into H_ReportsDivisions	
	select
	getdate(),
	@db_in_xml.value('/tables[1]/@devisionNumber', 'int'),
	@db_in_xml.value('/tables[1]/@devisionTitle', 'nvarchar(50)'),
	@db_in_xml.value('/tables[1]/@dateBegin', 'datetime'),
	@db_in_xml.value('/tables[1]/@dateEnd', 'datetime'),
	@db_in_xml

return 0
END
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Docs_Acts_Goods', @level2type=N'CONSTRAINT',@level2name=N'FK_Docs_Acts_Goods_Docs_Conclusions_Import'
GO
USE [master]
GO
ALTER DATABASE [InspectorDB] SET  READ_WRITE 
GO
